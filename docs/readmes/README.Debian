=========================================================
Instructions for installing ROSE on Debian 8 "Jessie"
=========================================================

2015-08-27: Tested on Amazon AWS for ROSE binary analysis.

+ Install "aptitude" since that's what the following documentation
  will use.

	$ sudo apt-get install aptitude

+ Make sure the system software is up-to-date.

	$ sudo aptitude update
	$ sudo aptitude safe-upgrade
	$ sudo aptitude install build-essential

+ Optional downgrade from gcc 4.9 to 4.8. You don't NEED to set up
  alternatives, but it's easier this way instead of fighting with
  boost's weird build system that doesn't honor the "CXX=g++-4.8"
  environment variable.

	$ sudo aptitude install g++-4.8 gfortran-4.8
	$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100
	$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100
	$ sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-4.8 100
	$ g++ --version # make sure it says 4.8.*

+ Download build systems (ROSE support for autoconf is currently
  better than cmake, but you'll need cmake if you want to install
  yaml-cpp and Wt).

	$ sudo aptitude install libtool automake make cmake

+ Other prerequisites

  	$ sudo aptitude install flex bison
	$ sudo aptitude install libssl-dev libxml2-dev libgcrypt11-dev
	$ sudo aptitude install git
	# The next few lines are optional, but recommended
	$ sudo aptitude install doxygen graphviz-dev dot2tex swig
	$ sudo aptitude install libqt4-dev qt4-dev-tools libgraphicsmagick-dev
	$ sudo aptitude install libsqlite3-dev libpqxx3-dev postgresql
	$ sudo aptitude install libreadline-dev libmagic-dev
  
+ Install Sun/Oracle Java-7 JVM. This is non-libre software that must
  be downloaded from Oracle's web site. E.g., I downloaded
  jdk-7u51-linux-x64.tar.gz.

	$ sudo mkdir -p /usr/lib/jvm
	$ cd /usr/lib/jvm
	$ sudo tar xf ~/Downloads/jdk-7u51-linux-x64.tar.gz
	$ sudo ln -s jdk1.7.0_51 java-7-sun
        $ cd java-7-sun/bin
	$ for f in $(find . -maxdepth 1 -type f -perm -500 -printf '%f\n'); do \
	    sudo update-alternatives --install \
	        /usr/bin/$f $f /usr/lib/jvm/java-7-sun/bin/$f 1072
	  done
	  # Ignore warning about not replacing /usr/bin/apt with a
	  # link.  In fact, make sure its not a link!
	$ javac -version # make sure it says "javac 1.7.0_51"

+ Install ccache (optional)

	$ sudo aptitude install ccache
	$ ccache -M 8G
	$ ccache -s
	$ # make sure PATH points to /usr/lib/ccache
	$ which g++ # should be /usr/lib/ccache/g++

+ Install boost 1.50. Instructions are at http://boost.org. You may
  need to add "-sNO_ZLIB=1" and/or "-sNO_BZIP2=1" to the "b2"
  command. (Robb has an "install-boost" script to download, build, and
  install multiple versions).

+ Install yaml-cpp-0.5.1. Instructions are at their web site. YAML
  support is optional; the binary analysis parts of ROSE use it for
  reading and writing configuration files. (Robb has an "install-yaml"
  script that downloads, builds, and installs against multiple
  versions of boost.)

+ Install dlib-18.10 by simply unpacking it (ROSE only uses its header
  files).  DLib is optional. Some binary analysis tools use it for
  some graph algorithms.

+ Install Wt web toolkit. Wt is optional. Some binary analysis tools
  use it for a web server. (Robb has an "install-wt" script that
  downloads, builds, and installs against multiple versions of boost.)

+ Install the Yices SMT solver static library and executable for
  version 1.0.34.  This is non-libre software. Yices is
  optional. Binary analysis uses it to solve equations that describe
  memory aliasing and some other things.

+ Download some version of ROSE (and optional EDG). Run the "build"
  and "configure" scripts according to other
  instructions. Alternatively, use cmake.

  1. If you encounter "ERROR: Could not find
     "/usr/include/sys/cdefs.h" system header file ... (referenced by
     ROSE specific "sys/cdefs.h" header file)" then remove the "exit
     5" line from $ROSE_SOURCE/config/create_system_headers near line
     287 and re-run the "configure" command. (I'm not sure what effect
     this has on ROSE's source code analysis, but it's fine for binary
     analysis.)

  2. If you encounter "configure: error: this package requires Python
     >= 0.0.0 and < 3.1.4." then change
     $ROSE_SOURCE/config/support-rose.m4 near line 675 from [3.1.4] to
     [4.0.0] and then re-run "(cd $ROSE_SOURCE && ./build)" and the
     "configure" command.

+ Compile and install (e.g., "make install").

=====================================================
Instructions for installing ROSE on Debian 7 "Wheezy"
=====================================================

Not written yet.

===================================================================
Instructions for installing ROSE locally on Debian Lenny or Squeeze
===================================================================

2011-01-05

These instructions were initially written for Debian Lenny, and have
been modified to describe Debian Squeeze, which is largely the
same as Lenny.

0. Install Debian. You can do this in a virtual machine, in
   which case you can save some time by not installing the entire
   graphical user interface (X server, window managers, etc).  If you
   go this route, you may want to install openssh-server so you can
   get to your virtual machine.

   To omit the X server, window managers, and their multitude of
   related programs and servers, just uncheck "desktop" when you get
   to the point in the installation where you need to choose what kind
   of system to build.  Some of the other ROSE prerequisites may pull
   in the X windows libraries, but that's OK.

   To start an SSH server, run:

	# aptitude install openssh-server

1. [Only for Lenny; skip this step for Squeeze] You'll need some
   additional packages beyond the basic stuff.  So edit
   /etc/apt/sources.list and add the words "contrib" and "non-free" to
   the end of each line.  Also add two additional backports lines that
   will allow you to install more recent libraries, including boost
   1.40.  The file should contain lines similar to these:

	deb http://ftp.us.debian.org/debian/ lenny main contrib non-free
	deb-src http://ftp.us.debian.org/debian/ lenny main contrib non-free

	deb http://security.debian.org/ lenny/updates main contrib non-free
	deb-src http://security.debian.org/ lenny/updates main contrib non-free

	deb http://volatile.debian.org/debian-volatile lenny/volatile main contrib non-free
	deb-src http://volatile.debian.org/debian-volatile lenny/volatile main contrib non-free

	deb http://www.backports.org/debian lenny-backports main contrib non-free
	deb-src http://www.backports.org/debian lenny-backports main contrib non-free

   NOTE: I'm not sure whether "contrib" and "non-free" are actually
   necessary, but that's what I already had on my main development
   system. [RPM 2011-01-05]

2. Make sure your system is up to date

	# aptitude update
	# aptitude safe-upgrade
	# aptitude install g++  # upgrade to latest version, 4.3 at this time

3. Install prerequisites
	# aptitude install libtool automake make flex bison doxygen
	# aptitude install libqt4-dev qt4-dev-tools
	# aptitude install libsqlite3-dev 
	# aptitude install libssl-dev libxml2-dev libgcrypt11-dev
	# aptitude install dot2tex swig default-jdk gfortran
	# aptitude install libpqxx3-dev postgresql

4. Install libboost1.40-dev and related development libraries. These
   probably aren't all needed, but we might as well install them all
   while we're at it.

   On Squeeze, the easiest way to get all these is to install just
   libboost1.42-all-dev.  You can do "aptitude search libboost" to
   figure out which version number to use.

	# aptitude install libboost1.40-dev
	# aptitude install libboost-date-time1.40-dev
	# aptitude install libboost-filesystem1.40-dev
	# aptitude install libboost-graph-parallel1.40-dev
	# aptitude install libboost-graph1.40-dev
	# aptitude install libboost-iostreams1.40-dev
	# aptitude install libboost-math1.40-dev
	# aptitude install libboost-mpi1.40-dev
	# aptitude install libboost-program-options1.40-dev
	# aptitude install libboost-signals1.40-dev
	# aptitude install libboost-thread1.40-dev
	# aptitude install libboost-wave1.40-dev

4. Untar the ROSE sources and "cd" into the top of the directory,
   which we call $ROSE_SRC

	$ tar xvzf rose-0.9.5a-without-EDG-12993.tar.gz
	$ cd rose-0.9.5a-12993

5. Run the "build" script to generate all the "Makefile.in" from
   "Makefile.am" and a few other housekeeping chores.

	$ ./build

6. Create a build directory for object files, libraries, executables,
   etc.  This also allows you to easily wipe out a failed build and
   start over by simply removing the build directory and recreating
   it.  We'll call this directory $ROSE_BLD. The following commands
   assume that the build directory is located in the top of the source
   directory (i.e., $ROSE_BLD == $ROSE_SRC/_build), but you could put
   it anywhere and call it anything.

	$ mkdir _build
	$ cd _build

7. Configure the build environment. You must run this command with the
   CWD = $ROSE_BLD since this is what links the build directory to the
   source directory.

	$ ../configure --prefix=$(pwd)/installed \
	    --enable-assembly-semantics \
	    --with-CFLAGS=-fPIC \
	    --with-CXXFLAGS=-fPIC \
	    --with-CXX_DEBUG=-g \
	    --with-CXX_OPTIMIZE=-O0 \
	    --with-CXX_WARNINGS=-Wall \
	    --with-C_DEBUG=-g \
	    --with-C_OPTIMIZE=-O0 \
	    --with-C_WARNINGS=-Wall \
	    --with-ROSE_LONG_MAKE_CHECK_RULE=yes \
	    --with-boost=/usr \
	    --with-pch \
	    --with-qt=/usr \
	    --with-qt-lib \
	    --with-roseQt \
	    --with-sqlite3

8. Build everything. You can also add "-j16", or such as your system
   is capable, to the "make" command in order to speed things up. It
   also helps to use distcc and ccache if you have them.  Run this
   from $ROSE_BLD.

	$ rm -rf $ROSE_BLD/installed	(see next step)
	$ make
	$ make check			(this is optional)

9. Install everything into the directory you specified with the
   "--prefix" switch in the "configure" command above.  Run this from
   $ROSE_BLD.  If you ever rebuild ROSE, be sure to delete the
   installation directory first. It seems that the build process
   sometimes grabs old headers and libraries from the installation
   directory rather than the build directory.

	$ make install


==========================================
Installing Internal Projects that use ROSE
==========================================

Internal projects are packaged separately from ROSE, they use the same
basic build process and scripts, and they reference an installed copy
of ROSE (the ROSE headers and libraries).

1. Untar the internal project. You can do this anywhere in the file
   system; it does not have to be under the ROSE source tree, although
   the ROSE source tree must also be present on your system.

	$ tar xvzf rose-internal-projects.tar.gz
	$ cd rose-internal-projects

2. Run the "build" script to generate "Makefile.in" from "Makefile.am"
   and a few other housekeeping chores.  We need to tell it where the
   ROSE source tree is located.

	$ ./build --srcpath=$ROSE_SRC

3. Create a build directory like we did for ROSE.  This is where we'll
   do all of our compiling.

	$ mkdir _build
	$ cd _build

4. Configure the build environment.  The installation directory
   (--prefix switch) must match that which was used for ROSE itself.
   It's probably a good idea to use all the same switches as for ROSE.

	$ ../configure --prefix=$ROSE_BLD/installed \
	    --enable-assembly-semantics \
	    --with-CFLAGS=-fPIC \
	    --with-CXXFLAGS=-fPIC \
	    --with-CXX_DEBUG=-g \
	    --with-CXX_OPTIMIZE=-O0 \
	    --with-CXX_WARNINGS=-Wall \
	    --with-C_DEBUG=-g \
	    --with-C_OPTIMIZE=-O0 \
	    --with-C_WARNINGS=-Wall \
	    --with-ROSE_LONG_MAKE_CHECK_RULE=yes \
	    --with-boost=/usr \
	    --with-pch \
	    --with-qt=/usr \
	    --with-qt-lib \
	    --with-roseQt \
	    --with-sqlite3

5. Build everything

	$ make
