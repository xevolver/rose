//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConstructorInitializer
//////////////////////////////////////////////////////////////////////////

/*!
\class SgConstructorInitializer
\brief This class represents the notion of an initializer for a variable declaration or
expression in a function call argument list.

There are no direct uses of this IR node anywhere.  All initializers
are derived from this IR node to build derived classes such as SgConstructorInitializer,
SgAssignInitializer, and SgAggregateInitializer.

\internal This is a base class for all initializers.

\sa
\ref SgConstructorInitializer_usage  "Example of using a SgConstructorInitializer object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConstructorInitializer data members
/////////////////////////////////////////////////////////////////////////

/*!
\var SgConstructorInitializer::p_declaration
\brief This points to the associated member function declaration (a constructor).

Note that this pointer can be NULL if no such constructor is defined (e.g. compiler
generated default constructor).

\internal Constructors not explicit in the source code are not presently generated in ROSE
if there were to be generated in the future they will be marked as compiler generated
and likely we can then enforce that this be a valid pointer.  This variable is an
exception to the general rule that we have no NULL pointes within the AST.
*/

/*!
\var SgConstructorInitializer::p_args
\brief This points to the argument list of the associated constructor call.

\internal Note that this pointer is always a valid pointer, even if the constructor and class
declaration pointers are NULL.  This list can also be empty, but the poitner to the
list is always valid.
*/

/*
// DQ (8/5/2006): This data member has been removed to make this class more general
//                (e.g. construcotrs of primative types).
\var SgConstructorInitializer::p_class_decl
\brief This points to the associated class declaration for this constructor.

\internal This can at times be a NULL pointer, e.g. calls to unimplemented default constructors, if so then the bool valued variable
"p_associated_class_unknown" is always true.
*/

/*!
\var SgConstructorInitializer::p_expression_type
\brief This points to the associated type for this constructor.

\internal This pointer should always be valid,
"p_associated_class_unknown" is true iff "p_expression_type" is not a SgClassType.
*/

/*!
\var SgConstructorInitializer::p_need_name
\brief This bool value controls the output of the class name.

This might be somewhat redundant with the explicit vs. implement representation in the
source code (recorded in another flag of the SgExpression base class).
*/

/*!
\var SgConstructorInitializer::p_need_qualifier
\brief This bool value controls the output of the class names qualifier.

\internal The qualifier is currently always output. This variable is not used.
*/

/*!
\var SgConstructorInitializer::p_need_parenthesis_after_name
\brief This bool value controls the output of "()" after the class name.

The controls the output at "class X x;" or "class X x();".
*/

/*!
\var SgConstructorInitializer::p_associated_class_unknown
\brief This bool value indicates when p_declaration should be a valid pointer.

If true, then p_declaration is NULL, else if false, then p_declaration should 
be a valid pointer.

\todo Enforce p_declaration is valid pointer when p_associated_class_unknown is false 
within AST consistency tests.
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConstructorInitializer member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*
\fn SgConstructorInitializer::SgConstructorInitializer (const SgConstructorInitializer &X)
\brief Copy constructor (made private to prevent being called by accident).
*/

/*!
\fn SgConstructorInitializer::SgConstructorInitializer ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgConstructorInitializer base class.

\param startOfConstruct represents the position in the source code
\sa 
\ref SgConstructorInitializer_create "Example:create an SgConstructorInitializer object"
*/

/*!
\fn SgConstructorInitializer::~SgConstructorInitializer()
\brief This is the destructor.

Only the Sg_File_Info object can be deleted in this object.
*/

/*!
\fn SgConstructorInitializer::isSgConstructorInitializer (SgNode *s)
\brief Cast function (from derived class to SgConstructorInitializer pointer).

This functions returns a SgConstructorInitializer pointer for any input of a 
pointer to an object derived from a SgConstructorInitializer.

\return Returns valid pointer to SgConstructorInitializer if input is derived from a SgConstructorInitializer.
*/

/*!
\fn SgConstructorInitializer::isSgConstructorInitializer (const SgNode *s)
\brief Cast function (from derived class to SgConstructorInitializer pointer).

This functions returns a SgConstructorInitializer pointer for any input of a 
pointer to an object derived from a SgConstructorInitializer.

\return Returns valid pointer to SgConstructorInitializer if input is derived from a SgConstructorInitializer.
*/


/*!
\fn SgConstructorInitializer::get_need_name() const
\brief returns bool value if name is required in code generation then return true.

\return Returns bool value.
*/

/*!
\fn SgConstructorInitializer::set_need_name (bool required)
\brief This function allows the p_need_name flag to be set (used internally).

\param required - sets value of internal p_need_name flag.
\return Returns void.
*/

/*!
\fn SgConstructorInitializer::set_expression_type (SgType* type)
\brief Access function for p_expression_type.

\param required - sets value of internal p_expression_type.
\return Returns void.
*/

/*!
\fn SgConstructorInitializer::get_expression_type() const
\brief Access function for p_expression_type, returns pointer to SgType associated with constructor.

This is usually a SgClassType, but it can also be a primative type
(typically in association with a new operator).

\return Returns pointer to SgType.
*/

