//////////////////////////////////////////////////////////////////////////
// Documentation for class SgStatementExpression
//////////////////////////////////////////////////////////////////////////

/*!
\class SgStatementExpression
\brief This class represents the GNU extension "statement expression" (thus is
non-standard C and C++).

The statement expression is a GNU extension that is helpful in the implementation of
macros and expressions.  In most cases an alternative construction of code is possible.
More information is at: \n
http://developer.apple.com/documentation/developertools/gcc-4.0.1/gcc/Statement-Exprs.html \n
In g++, the result value of a statement expression undergoes array and function pointer
decay, and is returned by value to the enclosing expression. For instance, if A is a
class, then: \n
             A a; ({a;}).Foo() \n
will construct a temporary A object to hold the result of the statement expression, and
that will be used to invoke Foo. Therefore the this pointer observed by Foo will not be
the address of a.

\internal This sort of expression can be useful and is important to at least one user so
it is implemented in ROSE. 

\sa
\ref SgStatementExpression_usage  "Example of using a SgStatementExpression object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgStatementExpression data members
/////////////////////////////////////////////////////////////////////////

/*!
\var SgStatementExpression::p_statement
\brief This a pointer to the SgStatement (usually a SgBasicBlock).

This is the expression provided as an argument to the sizeof operator
(if it is an expression).

*/

/*!
\var SgStatementExpression::p_operand_type
\brief This a pointer to the SgType given to the sizeof operator.

This is the type provided as an argument to the sizeof operator
(if it is a type).

*/

/*!
\var SgStatementExpression::p_expression_type
\brief This a SgType, the type of the expression.

\internal Not clear if this is always a valid pointer.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgStatementExpression member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*
      NOT IMPELEMENTED IN C++ SOURCE CODE
\fn SgStatementExpression::SgStatementExpression (const SgStatementExpression &X)
\brief Copy constructor (made private to prevent being called by accident).
*/

/*!
\fn SgStatementExpression::SgStatementExpression ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgStatementExpression base class.

\param startOfConstruct represents the position in the source code
\sa 
\ref SgStatementExpression_create "Example:create an SgStatementExpression object"
*/

/*!
\fn SgStatementExpression::~SgStatementExpression()
\brief This is the destructor.

Only the Sg_File_Info object can be deleted in this object.
*/

/*!
\fn SgStatementExpression::isSgStatementExpression (SgNode *s)
\brief Cast function (from derived class to SgStatementExpression pointer).

This functions returns a SgStatementExpression pointer for any input of a 
pointer to an object derived from a SgStatementExpression.

\return Returns valid pointer to SgStatementExpression if input is derived from a SgStatementExpression.
*/

/*!
\fn SgStatementExpression::isSgStatementExpression (const SgNode *s)
\brief Cast function (from derived class to SgStatementExpression pointer).

This functions returns a SgStatementExpression pointer for any input of a 
pointer to an object derived from a SgStatementExpression.

\return Returns valid pointer to SgStatementExpression if input is derived from a
SgStatementExpression.
*/

