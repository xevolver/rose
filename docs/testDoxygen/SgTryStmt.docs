//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTryStmt
//////////////////////////////////////////////////////////////////////////

/*!
\class SgTryStmt
\brief This class represents the concept of try statement within the try-catch
support for exception handling in C++.

\sa
\ref SgTryStmt_usage  "Example of using a SgTryStmt object"
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTryStmt data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgTryStmt::p_body
\brief This pointer points to a SgBasicBlock containing the statements to be execued by
the try block.

*/

/*! \var SgTryStmt::p_catch_statement_seq_root
\brief This pointer points to a SgCatchStatementSeq and connects the try statement to the
sequence of catch statements within the support of exception handling.

*/

/*! \var SgTryStmt::p_else_body
\brief This pointer points to a SgBasicBlock containing the statements to be executed when
control flows off the end of the try clause. This member is intended for use with Python,
and is NULL otherwise.

/*! \var SgTryStmt::p_finally_body
\brief This pointer points to a SgBasicBlock containing the statements to be executed when
an unhandled exception occurs. This member is intended for use with Python, and is NULL
otherwise.

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTryStmt member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*!
\fn SgTryStmt::SgTryStmt ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgTryStmt base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgTryStmt_create "Example:create an SgTryStmt object"
*/

/*!
\fn SgTryStmt::~SgTryStmt()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgTryStmt::isSgTryStmt (SgNode *s)
\brief Cast function (from derived class to SgTryStmt pointer).

This functions returns a SgTryStmt pointer for any input of a 
pointer to an object derived from a SgTryStmt.

\return Returns valid pointer to SgTryStmt if input is derived from a SgLocatedNode.
*/

/*!
\fn SgTryStmt::isSgTryStmt (const SgNode *s)
\brief Cast function (from derived class to SgTryStmt pointer).

This functions returns a SgTryStmt pointer for any input of a 
pointer to an object derived from a SgTryStmt.

\return Returns valid pointer to SgTryStmt if input is derived from a SgLocatedNode.
*/

/*!
\fn SgTryStmt::get_body() const
\brief Returns pointer to SgBasicBlock.

\return Returns pointer to SgBasicBlock.
*/

/*!
\fn SgTryStmt::set_body(SgBasicBlock* body)
\brief Access function for p_body.

\return Returns void.
*/

/*!
\fn SgTryStmt::get_catch_statement_seq_root() const
\brief Returns pointer to SgCatchStatementSeq.

\return Returns pointer to SgCatchStatementSeq.
*/

/*!
\fn SgTryStmt::set_catch_statement_seq_root(SgCatchStatementSeq* catch_statement_seq_root)
\brief Access function for p_catch_statement_seq_root.

\return Returns void.
*/


