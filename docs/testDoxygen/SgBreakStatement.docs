//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBreakStatement
//////////////////////////////////////////////////////////////////////////

/*!
\class SgBreakStmt
\brief This class represents the notion of a break statement 
(typically used in a switch statment).

This class is used to exit from inside of a jump to the outer
block.  It is a specific feature of the C language.  It is typically used to 
break out of a basic clock or a loop. The break statement is important to
the specification of the control flow within a program.
The SgBreakStmt is derived from a SgStatement and does not have any
data members.

\internal The name of this class will be changed to SgBreakStatement in 
the future.  See \ref FutureNameChanges for details on proposed future 
name changes.

\sa
\ref SgBreakStatement_create "Example of creating a SgBreakStmt object" \n
\ref SgBreakStatement_usage  "Example of using a SgBreakStmt object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBreakStatement data members
/////////////////////////////////////////////////////////////////////////

/*!
   There are no data members for this class.
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBreakStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*
\fn SgBreakStmt::copy(const SgCopyHelp & help ) const
\brief This function clones the current SgBreakStmt object recursively or not, depending on the argument
// \brief Copies an existing SgBreakStmt.

This function performs a copy based on the specification of the input parameter.
The input parameter is used to determin which data members are copied by reference
and which are copied by value.

\param help - If this argument is of type SgTreeCopy, then the
SgInitializedName is cloned recursively. If it's of type SgShallowCopy
only the first level of SgInitializedName is copied, everything else
pointing to the the original SgInitializedName object's data members.
\return a pointer to the new clone.

\exception none No exceptions are thrown by this function.
*/

/*!
\fn SgBreakStmt::SgBreakStmt ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor

This constructor builds a SgBreakStmt used typically to break out of
a loop of within a switch statement's case statement.

\param startOfConstruct represents the position in the source code
\sa 
\ref SgBreakStatement_create "Example:create an SgBreakStatement object"
*/

/*!
\fn SgBreakStmt::~SgBreakStmt()
\brief This is the destructor.

There is nothing to delete in this object.
*/

/*
\fn SgBreakStmt::sage_class_name() const
\brief generates string: "SgBreakStmt"

This function is useful for debugging and error reporting.  It
returns the name of the IR node.

\return a char* pointer to a C style string.
*/

/*
\fn SgBreakStmt::variant()
\brief Older version function returns enum value "BREAK_STMT"

This function is an older version of the variant function.
This function is useful for debugging and error reporting.  It
returns the name of the IR node.

\return an enum value.
\deprecated Use Tvariant() instead.  Older enum values have inconsistant 
names and are being removed.
*/

/*
\fn SgBreakStmt::variantT()
\brief returns enum value "V_SgBreakStmt"

This function is useful for debugging and error reporting.  It
returns the name of the IR node.

\return an enum value.
\deprecated Use Tvariant() instead.  Older enum values have inconsistant 
names and are being removed.
*/

/*
\fn SgBreakStmt::error()
\brief tests for internal errors ???


\return Returns bool; true if there is an error, and false if OK.
*/



