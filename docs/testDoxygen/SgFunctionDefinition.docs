//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionDefinition
//////////////////////////////////////////////////////////////////////////

/*!
\class SgFunctionDefinition
\brief This class represents the concept of a scope in C++ (e.g. global scope, fuction scope, etc.).

Scopes are an important aspect of language design. They allow
declarations to have a local context and so promote good programming style.
Scope statments in C++ include a number of different kinds of statements;
the SgFunctionDefinition is a base class for these. Each scope statement contains
a symbol table and the SgFunctionDefinitions role is mostly to provide this
symbol table and an interface to accessing it.

\internal This is a base class for scope statements.

*/

/*
\sa
\ref SgFunctionDefinition_usage  "Example of using a SgFunctionDefinition object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionDefinition data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgFunctionDefinition::p_body
\brief This pointer is always valid and points to a SgBasicBlock holding all the
statements in the function.

\internal 

*/

/*! \var SgFunctionDefinition::p_par_flag
\brief This is a bool value left over from CC++. 

\internal This can be removed at some point.

\deprecated This variable is left over from CC++ and can be removed.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgFunctionDefinition member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgFunctionDefinition::SgFunctionDefinition ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgFunctionDefinition base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgFunctionDefinition_create "Example:create an SgFunctionDefinition object"
*/

/*!
\fn SgFunctionDefinition::~SgFunctionDefinition()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgFunctionDefinition::isSgFunctionDefinition (SgNode *s)
\brief Cast function (from derived class to SgFunctionDefinition pointer).

This functions returns a SgFunctionDefinition pointer for any input of a 
pointer to an object derived from a SgFunctionDefinition.

\return Returns valid pointer to SgFunctionDefinition if input is derived from a SgLocatedNode.
*/

/*!
\fn SgFunctionDefinition::isSgFunctionDefinition (const SgNode *s)
\brief Cast function (from derived class to SgFunctionDefinition pointer).

This functions returns a SgFunctionDefinition pointer for any input of a 
pointer to an object derived from a SgFunctionDefinition.

\return Returns valid pointer to SgFunctionDefinition if input is derived from a SgLocatedNode.
*/

/*!
\fn SgFunctionDefinition::get_qualified_name() const
\brief Returns SgName (a string) representing the name of the current scope.

See discussion of mangled names in the documentation.

\return Returns SgName (a string).
*/

/*!
\fn SgFunctionDefinition::copy(const SgCopyHelp & help)
\brief Makes a copy (deap of shallow depending on SgCopyHelp).

\return Returns pointer to copy of SgFunctionDefinition.
*/

/*!
\fn SgFunctionDefinition::get_body() const
\brief Access function for p_body.

\return Returns a pointer to a SgBasicBlock.
*/

/*!
\fn SgFunctionDefinition::set_body(SgBasicBlock* body)
\brief Access function for p_body.

\param body SgBasicBlock pointer
\return Returns void.
*/

