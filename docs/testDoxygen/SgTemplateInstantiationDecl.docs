//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationDecl
//////////////////////////////////////////////////////////////////////////

/*!
\class SgTemplateInstantiationDecl
\brief This class represents the concept of an instantiated class template.

\internal Objects of this class are marked as compiler-generated if they are instantiated
by the compiler, but not if they are generated from a specialization (where the user
has in effect generated it).  A few details:
       - Currently multple declaration have a valid pointer to the
SgTemplateInstantiationDefn object even though there is only one defining
declaration.  This is different from functions declarations where only one declaration
has a valid pointer to the SgFunctionDefinition.  This needs to be made consistant at
some point.

\todo Make the "*PtrList" typed objects non-pointer data members (lists) instead of
pointer to lists.

\sa
\ref SgTemplateInstantiationDecl_usage  "Example of using a SgTemplateInstantiationDecl object"
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationDecl data members
/////////////////////////////////////////////////////////////////////////

/*!
\var SgTemplateInstantiationDecl::p_templateName
\brief This is the name of the templated class (excludes template arguments)

\internal This name is computed internally (in AST post-processing) and stored 
explicitly.  It can be reset by calling resetTemplateName(SgTemplateInstantiationDecl).
*/

/*!
\var SgTemplateInstantiationDecl::p_templateHeader
\brief This data field is not used (or is used internally).

I forget what this name includes.
*/

/*!
\var SgTemplateInstantiationDecl::p_templateDeclaration
\brief This is the template declarations (SgTemplateDeclaration) from which this template
instantiation is constructed.  This can be NULL, as I recall, for nested classes.

*/

/*!
\var SgTemplateInstantiationDecl::p_templateArguments
\brief This is a pointer to a list of pointers to SgTemplateArgument objects (used with
the SgTemplateDeclaration to construct this instantiation).

The template arguments are used to generate the full template name recorded in
p_templateName.  All arguments are saved into the argument list, but not all
arguments are output in the generated code (see SgTemplateArgument for details).

\note Template arguments are found in the instantiations, and template parameters are found
in the SgTemplateDeclaration (arguments are not the same a parameters, same as for
descriptions for functions).
*/

/*!
\var SgTemplateInstantiationDecl::p_nameResetFromMangledForm
\brief This bool value is set to false at construction and later reset to true 
within post-processing as each instantiated template name is reset from EDG
names (e.g. "A____L42") to ROSE generated names (e.g. "A<int>").  Either names
would work as well for some purposes, but for source to source translation purposes
we wanted the original names to be used (also avoids/simplifies linking issues 
using generated code with non-generated code).

\internal This variable is set/reset internally and there is no need for it to be set by the user!
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateInstantiationDecl member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgTemplateInstantiationDecl::SgTemplateInstantiationDecl ( Sg_File_Info* startOfConstruct = NULL, 
         SgName name = SgdefaultName, int class_type = 0, SgClassType *type=NULL,
         SgClassDefinition *definition=NULL)
\brief This is the only constructor.

This constructor builds the SgTemplateInstantiationDecl base class. but has some specific
side-effects (some of which have been removed in the latest work).  It is however
still that case that if the definition is provided then it's declaration will be changed
to the declaration being constructed (a warning message it output if this happens and
this side-effect will be removed soon).

\param startOfConstruct represents the position in the source code
\sa 
\ref SgTemplateInstantiationDecl_create "Example:create an SgTemplateInstantiationDecl object"
*/

/*!
\fn SgTemplateInstantiationDecl::~SgTemplateInstantiationDecl()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.

*/

/*!
\fn SgTemplateInstantiationDecl::isSgTemplateInstantiationDecl (SgNode *s)
\brief Cast function (from derived class to SgTemplateInstantiationDecl pointer).

This functions returns a SgTemplateInstantiationDecl pointer for any input of a 
pointer to an object derived from a SgTemplateInstantiationDecl.

\return Returns valid pointer to SgTemplateInstantiationDecl if input is derived from a SgLocatedNode.
*/

/*!
\fn SgTemplateInstantiationDecl::isSgTemplateInstantiationDecl (const SgNode *s)
\brief Cast function (from derived class to SgTemplateInstantiationDecl pointer).

This functions returns a SgTemplateInstantiationDecl pointer for any input of a 
pointer to an object derived from a SgTemplateInstantiationDecl.

\return Returns valid pointer to SgTemplateInstantiationDecl if input is derived from a SgLocatedNode.
*/

/*! 
\fn SgTemplateInstantiationDecl::get_templateName() const
\brief Returns name of class template, the name excludes template arguments.

For the template name with arguments, e.g. "class_template<int>" the user should call 
get_name() (defined in the SgClassDeclaration base class).

\note The SgClassSymbol used to hold a reference to this declaration in the symbol table
is placed into the symbol table using the get_name(); includes template arguments.

\internal There are cases where the arguments should not be unparse and then
this version of the name is required. Also in generating mangled names, this
is a more useful name to have separately from the name which inclused arguments.
However in these case it still seems that we could get it from the template
declaration (if it is available, member fucntions of a templated class may not
have an explicit or separate template declaration).

\return returns SgName by value.
*/

/*! 
\fn SgTemplateInstantiationDecl::set_templateName(SgName name)
\brief sets name of instantiated class template, name excludes template arguments.

\return returns void.
*/

/*! 
\fn SgTemplateInstantiationDecl::get_templateDeclaration() const
\brief Returns pointer to SgTemplateDeclaration from which instantiation is generated.

\return returns pointer to SgTemplateDeclaration.
*/

/*! 
\fn SgTemplateInstantiationDecl::set_templateDeclaration(SgTemplateDeclaration* templateDeclaration)
\brief Access function for p_templateDeclaration.

\return returns void.
*/

/*!
\fn SgTemplateInstantiationDecl::get_templateArguments() const
\brief Returns pointer to STL list of pointers to SgTemplateArgument objects.

\return Returns pointer to STL list of pointers to SgTemplateArgument objects.
*/

/*! 
\fn SgTemplateInstantiationDecl::set_templateArguments(SgTemplateArgumentPtrListPtr templateArguments)
\brief Access function for p_templateArguments.

\return returns void.
*/

/*! 
\fn SgTemplateInstantiationDecl::get_nameResetFromMangledForm() const
\brief Returns pointer to SgTemplateDeclaration from which instantiation is generated.

\return returns pointer to SgTemplateDeclaration.
*/

/*! 
\fn SgTemplateInstantiationDecl::set_nameResetFromMangledForm(bool nameResetFromMangledForm)
\brief Access function for p_nameResetFromMangledForm.

\return returns void.
*/

