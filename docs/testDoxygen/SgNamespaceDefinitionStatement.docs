//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNamespaceDefinitionStatement
//////////////////////////////////////////////////////////////////////////

/*!
\class SgNamespaceDefinitionStatement
\brief This class represents the concept of a namespace definition.  

Namespace definitions
are coupled with namespace declarations to defin the namespace (hold the list of
declarations in the namespace.  Within C++ namespaces are "reentrant" and
as a result multiple namespace declarations (SgNamespaceDeclarationStatement) 
and definitions (SgNamespaceDefinitionStatement) may exist for a single namespace.

\note Note that the namespace "std" is special in C++, such that a program
with the statement "using namespace std" can exist all by itself and is a
valid program (even though "std" as a namespace is not defined).

Scopes are an important aspect of language design. They allow
declarations to have a local context and so promote good programming style.
Scope statments in C++ include a number of different kinds of statements;
the SgNamespaceDefinitionStatement is a base class for these. Each scope statement contains
a symbol table and the SgNamespaceDefinitionStatements role is mostly to provide this
symbol table and an interface to accessing it.

\internal This is a base class for scope statements.

\todo Cleanup interface which presently has multiple append,prepend, insert functions. It
might be best to eliminate them and use STL directly.
*/

/*
\sa
\ref SgNamespaceDefinitionStatement_usage  "Example of using a SgNamespaceDefinitionStatement object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNamespaceDefinitionStatement data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgNamespaceDefinitionStatement::p_declarations
\brief This is an STL list of SgDeclarationStatement objects.

\internal The name is perhaps all to similar to p_declaration (which exists on many IR nodes).
*/

/*! \var SgNamespaceDefinitionStatement::p_namespaceDeclaration
\brief This is a pointer to the SgNamespaceDeclarationStatement.

\internal The name would have been p_declaration, except that such a name is too close to
p_declarations.  These naming details might be fixed later.
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNamespaceDefinitionStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgNamespaceDefinitionStatement::SgNamespaceDefinitionStatement ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgNamespaceDefinitionStatement base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgNamespaceDefinitionStatement_create "Example:create an SgNamespaceDefinitionStatement object"
*/

/*!
\fn SgNamespaceDefinitionStatement::~SgNamespaceDefinitionStatement()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgNamespaceDefinitionStatement::isSgNamespaceDefinitionStatement (SgNode *s)
\brief Cast function (from derived class to SgNamespaceDefinitionStatement pointer).

This functions returns a SgNamespaceDefinitionStatement pointer for any input of a 
pointer to an object derived from a SgNamespaceDefinitionStatement.

\return Returns valid pointer to SgNamespaceDefinitionStatement if input is derived from a SgLocatedNode.
*/

/*!
\fn SgNamespaceDefinitionStatement::isSgNamespaceDefinitionStatement (const SgNode *s)
\brief Cast function (from derived class to SgNamespaceDefinitionStatement pointer).

This functions returns a SgNamespaceDefinitionStatement pointer for any input of a 
pointer to an object derived from a SgNamespaceDefinitionStatement.

\return Returns valid pointer to SgNamespaceDefinitionStatement if input is derived from a SgLocatedNode.
*/

/*!
\fn SgNamespaceDefinitionStatement::get_qualified_name() const
\brief Returns SgName (a string) representing the name of the current scope.

See discussion of mangled names in the documentation.

\return Returns SgName (a string).
*/

/*!
\fn SgNamespaceDefinitionStatement::copy(const SgCopyHelp & help)
\brief Makes a copy (deap of shallow depending on SgCopyHelp).

\return Returns pointer to copy of SgNamespaceDefinitionStatement.
*/

