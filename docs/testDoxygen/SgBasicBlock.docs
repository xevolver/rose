//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBasicBlock
//////////////////////////////////////////////////////////////////////////

/*!
\class SgBasicBlock
\brief This class represents the concept of a block (not a basic block from control flow analysis).

SgBasicBlocks are used in other IR nodes where a list of statements is
required.  However, if you need a list of statements we suggest you use an
STL list instead of borrowing and extending the semantics of SgBasicBlock.

\internal 

*/

/*
\sa
\ref SgBasicBlock_usage  "Example of using a SgBasicBlock object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBasicBlock data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgBasicBlock::p_statements
\brief This pointer an STL list of pointers to SgStatement objects.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgBasicBlock member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgBasicBlock::SgBasicBlock ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgBasicBlock base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgBasicBlock_create "Example:create an SgBasicBlock object"
*/

/*!
\fn SgBasicBlock::~SgBasicBlock()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgBasicBlock::isSgBasicBlock (SgNode *s)
\brief Cast function (from derived class to SgBasicBlock pointer).

This functions returns a SgBasicBlock pointer for any input of a 
pointer to an object derived from a SgBasicBlock.

\return Returns valid pointer to SgBasicBlock if input is derived from a SgLocatedNode.
*/

/*!
\fn SgBasicBlock::isSgBasicBlock (const SgNode *s)
\brief Cast function (from derived class to SgBasicBlock pointer).

This functions returns a SgBasicBlock pointer for any input of a 
pointer to an object derived from a SgBasicBlock.

\return Returns valid pointer to SgBasicBlock if input is derived from a SgLocatedNode.
*/

/*!
\fn SgBasicBlock::get_symbol_table()
\brief Returns a pointer to the locally strored SgSymbolTable.

\return Returns a pointer.
*/

/*!
\fn SgBasicBlock::set_symbol_table(SgSymbolTable *symbolTable)
\brief Sets the pointer to the locally strored SgSymbolTable.

\return Returns void.
*/

/*!
\fn SgBasicBlock::get_qualified_name() const
\brief Returns SgName (a string) representing the name of the current scope.

See discussion of mangled names in the documentation.

\return Returns SgName (a string).
*/

/*!
\fn SgBasicBlock::copy(const SgCopyHelp & help)
\brief Makes a copy (deap of shallow depending on SgCopyHelp).

\return Returns pointer to copy of SgBasicBlock.
*/

/*!
\fn SgBasicBlock::get_statements() const
\brief Returns a const STL list by reference.

\return Returns const SgStatementPtrList (STL list) by reference.
*/

/*!
\fn SgBasicBlock::get_statements()
\brief Returns a non-const STL list by reference.

\return Returns non-const SgStatementPtrList (STL list) by reference.
*/

