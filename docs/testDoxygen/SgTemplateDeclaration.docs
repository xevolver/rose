//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateDeclaration
//////////////////////////////////////////////////////////////////////////

/*!
\class SgTemplateDeclaration
\brief This class represents the concept of a template declaration.

This template declaration is internally marked as being either a
     - class (e_template_class), 
     - member class (e_template_m_class), 
     - function (e_template_function), 
     - member function (e_template_m_function), or 
     - member data (e_template_m_data)

The name of the template is available from the get_name() member function.
The rest of the template is internally strored as a string (this will be 
changed very quickly).  The template parameters are available within from
the get_templateParameters() member function.  The scope is stored explicitly
for this IR node, since name qualification permits it to have a scope
independent of its structural location within the source code.

\todo Template declarations marked as friend don't seem to be marked as friend internally.

\todo The scope of a SgTemplateDeclaration should be a SgTemplateInstantiationDefn, since
it could be associated which more than one definition.  What we need, and don't have
yet, is a SgTemplateDefinition to accompany the SgTemplateDeclaration then a 
SgTemplateDeclaration could have a SgTemplateDefinition for a parent and or scope
when it is a member function or namespace or global scope (typically), otherwise.

\todo Make the "*PtrList" typed objects non-pointer data members (lists) instead of
pointer to lists.

\note Template specializations appear in syntax to be a template declaration (with
explicit template arguments), but they are really just an explicit template
instantiation. Thus Sage III stores such template specializations as template
instantiations and references the associated template declaration
(SgTemplateDeclaration) internally.


\sa
\ref SgTemplateDeclaration_usage  "Example of using a SgTemplateDeclaration object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateDeclaration data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgTemplateDeclaration::p_name
\brief This is the name of the template

This is the name of the template (e.g. for "template<class T> class X;",
the name is "X".

*/

/*! \var SgTemplateDeclaration::p_string
\brief This is the full template declaration as a string only.

This is the template declaration as a string (e.g. for "template<class T> class X {};",
the string is "template<class T> class X {};".

\todo Check the accuracy of this statement in the unparser!

*/

/*! \var SgTemplateDeclaration::p_template_kind
\brief This is the classification of the template declaration

This is the classification of the template declaration.
This template declaration is internally marked as being either a
     - class (e_template_class), 
     - member class (e_template_m_class), 
     - function (e_template_function), 
     - member function (e_template_m_function), or 
     - member data (e_template_m_data)

*/

/*! \var SgTemplateDeclaration::p_templateParameters
\brief This is the STL list of pointers template parameters (SgTemplateParameter objects)

This is the STL list of pointers to template parameters (SgTemplateParameter objects)
For example, for "template<class T> class X;", the STL list would contain a SgTemplateParameter
representing T.

*/

/*! \var SgTemplateDeclaration::p_scope
\brief This is the scope of the template declaration.

This is stored explicitly since name qualification can be used to 
place some declarations in positions that are different from their
scope if it were computed structureally from the parent pointer data.

*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgTemplateDeclaration member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*!
\fn SgTemplateDeclaration::SgTemplateDeclaration ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgTemplateDeclaration base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgTemplateDeclaration_create "Example:create an SgTemplateDeclaration object"
*/

/*!
\fn SgTemplateDeclaration::~SgTemplateDeclaration()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgTemplateDeclaration::isSgTemplateDeclaration (SgNode *s)
\brief Cast function (from derived class to SgTemplateDeclaration pointer).

This functions returns a SgTemplateDeclaration pointer for any input of a 
pointer to an object derived from a SgTemplateDeclaration.

\return Returns valid pointer to SgTemplateDeclaration if input is derived from a SgLocatedNode.
*/

/*!
\fn SgTemplateDeclaration::isSgTemplateDeclaration (const SgNode *s)
\brief Cast function (from derived class to SgTemplateDeclaration pointer).

This functions returns a SgTemplateDeclaration pointer for any input of a 
pointer to an object derived from a SgTemplateDeclaration.

\return Returns valid pointer to SgTemplateDeclaration if input is derived from a SgLocatedNode.
*/

/*!
\fn SgTemplateDeclaration::get_name()
\brief Returns name of template declaration.

\return Returns SgName by value.
*/

/*!
\fn SgTemplateDeclaration::set_name(SgName name)
\brief Access function for p_name.

\return Returns void.
*/

/*!
\fn SgTemplateDeclaration::get_string()
\brief Returns stringified template declaration.

\return Returns SgName by value.
*/

/*!
\fn SgTemplateDeclaration::set_string(SgName name)
\brief Access function for p_string.

\return Returns void.
*/

/*!
\fn SgTemplateDeclaration::get_template_kind()
\brief Returns enum value (function, class, etc.)

\return Returns enum value
*/

/*!
\fn SgTemplateDeclaration::set_template_kind(SgName name)
\brief Access function for p_template_kind.

\return Returns void.
*/

