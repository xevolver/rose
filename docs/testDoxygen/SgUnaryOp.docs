//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUnaryOp
//////////////////////////////////////////////////////////////////////////

/*!
\class SgUnaryOp
\brief This class represents the notion of a unary operator.
It is derived from a SgExpression because operators are expressions.

There are no uses of this IR node anywhere.  All expressions
are derived from this IR node to build derived classes.  Example
unary operators include unary minus, unary plus, the address operator,
etc.

\internal This is a base class for all unary operators.

\sa
\ref SgUnaryOp_usage  "Example of using a SgUnaryOp object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUnaryOp data members
/////////////////////////////////////////////////////////////////////////

          enum Sgop_mode { prefix=0, postfix };

/*!
\var SgUnaryOp::p_operand_i
\brief This is the operand associated with the unary operator.

Every unary operator is applied to a single operand, this
variable stores the operand to which the unary operator is applied.

*/

/*!
\var SgUnaryOp::p_expression_type
\brief This SgType is the type of the operator (function type).

The type is now computed where possible (in all cases except 
for SgCastExp). This allows us to save space and avoid having 
explicitly stored values be unset or set incorrectly.

\deprecated This is no longer used (except for SgCastExp).

\todo This value is only used for the SgCastExp, we will
move it to that IR node when we are ready to change the interface
for the SgExpressions (and SgUnaryExp IR nodes).

*/

/*!
\var SgUnaryOp::p_mode
\brief This SgType is the type of the operator (function type).

This variable records the prefix vs. postfix semantics of the operator 
since the syntax of "operator++" cannot readily do so.  This approach is
simpiler to interogate than the C++ syntax for distingishing prefix vs.
postfix.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgUnaryOp member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*
      NOT IMPELEMENTED IN C++ SOURCE CODE
\fn SgUnaryOp::SgUnaryOp (const SgUnaryOp &X)
\brief Copy constructor (made private to prevent being called by accident).
*/

/*!
\fn SgUnaryOp::SgUnaryOp ( Sg_File_Info *startOfConstruct=NULL, SgExpression *operand_i=NULL, SgType *expression_type=NULL)
\brief This is the constructor.

This constructor builds the SgUnaryOp base class.

\param startOfConstruct represents the position in the source code
\param operand represents the operand to which the operator is applied
\param expression_type represents the type of the return value of the operator
\sa 
\ref SgUnaryOp_create "Example:create an SgUnaryOp object"
*/

/*!
\fn SgUnaryOp::~SgUnaryOp()
\brief This is the destructor.

Only the Sg_File_Info object can be deleted in this object.
*/

/*!
\fn SgUnaryOp::isSgUnaryOp (SgNode *s)
\brief Cast function (from derived class to SgUnaryOp pointer).

This functions returns a SgUnaryOp pointer for any input of a 
pointer to an object derived from a SgUnaryOp.

\return Returns valid pointer to SgUnaryOp if input is derived from a SgUnaryOp.
*/

/*!
\fn SgUnaryOp::isSgUnaryOp (const SgNode *s)
\brief Cast function (from derived class to SgUnaryOp pointer).

This functions returns a SgUnaryOp pointer for any input of a 
pointer to an object derived from a SgUnaryOp.

\return Returns valid pointer to SgUnaryOp if input is derived from a SgUnaryOp.
*/


/*!
\fn SgUnaryOp::get_operand() const
\brief returns SgExpression pointer to the operand associated with this unary operator.


\return Returns SgExpression pointer.
*/

/*!
\fn SgUnaryOp::set_operand (SgExpression* operand)
\brief This function allows the p_operand pointer to be set (used internally).

This function is mostly used internally and is only required to support editing 
of existing SgUnaryOp objects.

\param operand - sets value of internal p_operand pointer.
\return Returns void.
*/

/*!
\fn SgUnaryOp::get_expression_type (void) const
\brief returns type of operator expression.

This function returns the type of the unary operator.

\return Returns type of operator expression.
*/

/*!
\fn SgUnaryOp::set_expression_type (SgType* expression_type)
\brief This function allows the p_expression_type pointer to be set (used internally).

This function is mostly used internally and is only required to support editing 
of existing SgUnaryOp objects. In general it is not changed once it is set.

\param expression_type - sets value of internal p_expression_type pointer.
\return Returns void.
*/

/*!
\fn SgUnaryOp::get_mode() const
\brief Get the prefix/postfix mode of the operator.

Get the prefix/postfix mode of the operator (if applicable to that operator).

\return Returns SgUnaryOp::Sgop_mode (enum for prefix,postfix values)
*/

/*!
\fn SgUnaryOp::set_mode ( SgUnaryOp::Sgop_mode mode )
\brief Set the mode (prefix/postfix) associated with this operator

This is an internal function, it sets up the prefix/postfix mode of the 
unary operator.

\param mode - sets value of intermal SgUnaryOp::Sgop_mode mode variable
\return Returns void
*/


/*!
\fn SgUnaryOp::length() const
\brief Returns number of operands (virtual function)

Returns number of operands (all unary operators return value = 1).
This function is not used and is not a defined part a minumal interface 
for Sage III.

\deprecated This function is not used.

\return Returns int
*/

/*!
\fn SgUnaryOp::empty () const
\brief Returns true if number of operands is zero, else false.

This function returns boolean value given by (length() == 0).
This function is not used and is not a defined part a minumal interface 
for Sage III.

\deprecated This function is not used.

\return Returns bool
*/


/*!
\fn SgUnaryOp::get_next(int &n) const
\brief Returns next operand (virtual function)

This function returns the next operand and is part of an 
older iterator interface within Sage II which didn't use STL, but implemented 
iterators for the operands (since their is only one for a unary operator
and two for a binary operator we don't support such an iterator interface
within Sage III.  The goal of Sage III is a minimal easily maintained 
interface.  This function is not used and is not a defined part a minumal 
interface for Sage III.

\deprecated This function is not used.

\return Returns int
*/

/*!
\fn SgUnaryOp::get_operand_i() const
\brief returns SgExpression pointer to the operand associated with this unary operator.

\deprecated This function is not used.

\return Returns SgExpression pointer.
*/

/*!
\fn SgUnaryOp::set_operand_i (SgExpression* operand)
\brief This function allows the p_operand_i pointer to be set (used internally).

This function is mostly used internally and is only required to support editing 
of existing SgUnaryOp objects.

\deprecated This function is not used.

\param operand - sets value of internal p_operand pointer.
\return Returns void.
*/

