//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConditionalExp
//////////////////////////////////////////////////////////////////////////

/*!
\class SgConditionalExp
\brief This class represents the concept of a C trinary conditional expression (e.g. "test ? true : false")

\sa
\ref SgConditionalExp_usage  "Example of using a SgConditionalExp object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConditionalExp data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgConditionalExp::p_conditional_exp
\brief This pointer points to a SgExpression object.

*/

/*! \var SgConditionalExp::p_true_exp
\brief This pointer points to a SgExpression object.

*/

/*! \var SgConditionalExp::p_false_exp
\brief This pointer points to a SgExpression object.

*/

/*! \var SgConditionalExp::p_expression_type
\brief This pointer points to a SgType object.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgConditionalExp member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*!
\fn SgConditionalExp::SgConditionalExp ( Sg_File_Info* startOfConstruct = NULL, SgClassSymbol *symbol = NULL )
\brief This is the constructor.

This constructor builds the SgConditionalExp base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgConditionalExp_create "Example:create an SgConditionalExp object"
*/

/*!
\fn SgConditionalExp::~SgConditionalExp()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgConditionalExp::isSgConditionalExp (SgNode *s)
\brief Cast function (from derived class to SgConditionalExp pointer).

This functions returns a SgConditionalExp pointer for any input of a 
pointer to an object derived from a SgConditionalExp.

\return Returns valid pointer to SgConditionalExp if input is derived from a SgLocatedNode.
*/

/*!
\fn SgConditionalExp::isSgConditionalExp (const SgNode *s)
\brief Cast function (from derived class to SgConditionalExp pointer).

This functions returns a SgConditionalExp pointer for any input of a 
pointer to an object derived from a SgConditionalExp.

\return Returns valid pointer to SgConditionalExp if input is derived from a SgLocatedNode.
*/

/*!
\fn SgConditionalExp::get_conditional_exp() const
\brief Access function for p_conditional_exp.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgConditionalExp::set_conditional_exp(SgExpression* conditional_exp)
\brief Access function for p_conditional_exp.

\param conditional_exp is the conditional test expression

\return Returns void.
*/

/*!
\fn SgConditionalExp::get_true_exp() const
\brief Access function for p_true_exp.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgConditionalExp::set_true_exp(SgExpression* true_exp)
\brief Access function for p_true_exp.

\param true_exp expression to evaluate if test is true.

\return Returns void.
*/

/*!
\fn SgConditionalExp::get_false_exp() const
\brief Access function for p_false_exp.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgConditionalExp::set_false_exp(SgExpression* false_exp)
\brief Access function for p_false_exp.

\param false_exp expression to evaluate if test is false.

\return Returns void.
*/

/*!
\fn SgConditionalExp::get_expression_type() const
\brief Access function for p_expression_type.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgConditionalExp::set_expression_type(SgType* expression_type)
\brief Access function for p_expression_type.

Both the p_true_exp and p_false_exp must have the same type.

\param expression_type type of result.

\return Returns void.
*/


