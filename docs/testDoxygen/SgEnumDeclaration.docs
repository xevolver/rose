//////////////////////////////////////////////////////////////////////////
// Documentation for class SgEnumDeclaration
//////////////////////////////////////////////////////////////////////////

/*!
\class SgEnumDeclaration
\brief This class represents the concept of an enum declaration.

\sa
\ref SgEnumDeclaration_usage  "Example of using a SgEnumDeclaration object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgEnumDeclaration data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgEnumDeclaration::p_name
\brief Name of enum type (empty if not named).

*/

/*! \var SgEnumDeclaration::p_embedded
\brief Boolean value true if embedded in a typedef declaration (might not be used).

*/

/*! \var SgEnumDeclaration::p_type
\brief SgEnumType generated by this enum declaration.

*/

/*! \var SgEnumDeclaration::p_enumerators
\brief STL list of pointers to SgInitializedName object (used for enum variables).

*/

/*! \var SgEnumDeclaration::p_scope
\brief Scope of enum declaration. 

Note that the scope of the enum must be stored explicitly since it can be declared in
a namespace and defined outside the namespace (note that forward declarations of
enum types.
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgEnumDeclaration member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgEnumDeclaration::SgEnumDeclaration ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgEnumDeclaration base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgEnumDeclaration_create "Example:create an SgEnumDeclaration object"
*/

/*!
\fn SgEnumDeclaration::~SgEnumDeclaration()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgEnumDeclaration::isSgEnumDeclaration (SgNode *s)
\brief Cast function (from derived class to SgEnumDeclaration pointer).

This functions returns a SgEnumDeclaration pointer for any input of a 
pointer to an object derived from a SgEnumDeclaration.

\return Returns valid pointer to SgEnumDeclaration if input is derived from a SgLocatedNode.
*/

/*!
\fn SgEnumDeclaration::isSgEnumDeclaration (const SgNode *s)
\brief Cast function (from derived class to SgEnumDeclaration pointer).

This functions returns a SgEnumDeclaration pointer for any input of a 
pointer to an object derived from a SgEnumDeclaration.

\return Returns valid pointer to SgEnumDeclaration if input is derived from a SgLocatedNode.
*/

/*!
\fn SgEnumDeclaration::get_name() const
\brief Access function for p_name.

\return Returns SgName by value.
*/

/*!
\fn SgEnumDeclaration::set_name(SgName name)
\brief Access function for p_name.

\return Returns void.
*/

/*!
\fn SgEnumDeclaration::get_embedded() const
\brief Access function for p_embedded.

\return Returns bool by value.
*/

/*!
\fn SgEnumDeclaration::set_embedded(bool embedded)
\brief Access function for p_embedded.

\return Returns void.
*/

/*!
\fn SgEnumDeclaration::get_type() const
\brief Access function for p_type.

\return Returns pointer to SgType.
*/

/*!
\fn SgEnumDeclaration::set_type(SgType* type)
\brief Access function for p_type.

\return Returns void.
*/

/*!
\fn SgEnumDeclaration::get_enumerators() const
\brief Access function for p_enumerators.

\return Returns a const reference to SgInitializedNamePtrList.
*/

/*!
\fn SgEnumDeclaration::get_enumerators()
\brief Access function for p_enumerators.

\return Returns reference to SgInitializedNamePtrList.
*/

/*!
\fn SgEnumDeclaration::get_scope() const
\brief Access function for p_scope.

\return Returns pointer to SgScopeStatement.
*/

/*!
\fn SgEnumDeclaration::set_scope(SgScopeStatment* scope)
\brief Access function for p_scope.

\return Returns void.
*/


