//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNamespaceDeclarationStatement
//////////////////////////////////////////////////////////////////////////

/*!
\class SgNamespaceDeclarationStatement
\brief This class represents the concept of a C++ namespace declaration.

The namespace declaration is differernt from many other declarations in that 
there is not concept of a namespace declaration that does not have an associated 
definition (SgNamespaceDefinitionStatement). In a sense each SgNamespaceDeclarationStatement
is a defining declaration, yet there can be more than one of them, so this concept of
a defining declaration doesn't fit were we consider that there must be only a single
defining declaration under the One-time Definition Rule (ODR).  This we don't consider
that SgNamespaceDeclarationStatement as a defining declaration.  As a result:
   - The defining declaration returned by get_definindDeclaration() is always NULL, and
   - The get_firstNondefiningDeclaration() member function will:
      - Always return a valid pointer, and
      - Will point to the first declaration of SgNamespaceDeclarationStatement

The scope of SgNamespaceDeclarationStatement is computed structurally from the 
parent information.

\todo Consider having a function which could generate a list of all the
SgNamespaceDeclarationStatement IR nodes that match the same namspace.
This would make a good first project for a new student.

\todo Include a graph to show how scopes are handled within the AST.

\sa
\ref SgNamespaceDeclarationStatement_usage  "Example of using a SgNamespaceDeclarationStatement object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNamespaceDeclarationStatement data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgNamespaceDeclarationStatement::p_name
\brief This the name of the new namespace alias (usually a shorter name).

*/

/*! \var SgNamespaceDeclarationStatement::p_definition
\brief This pointer points to the SgNamespaceDefinitionStatement, which holds the
declarations within the namespace.

*/

/*! \var SgNamespaceDeclarationStatement::p_isUnnamedNamespace
\brief Records special case of an unnamed namespace.

\internal Marking the IR nodes as unnamed is better than just having an empty string for
p_name.  This provides a reasonable mechanism to implement error checking internally.

*/

/*! \var SgNamespaceDeclarationStatement::p_scope
\brief This a pointer to the scope of the first declaration for the namespace.

*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNamespaceDeclarationStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*!
\fn SgNamespaceDeclarationStatement::SgNamespaceDeclarationStatement ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgNamespaceDeclarationStatement base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgNamespaceDeclarationStatement_create "Example:create an SgNamespaceDeclarationStatement object"
*/

/*!
\fn SgNamespaceDeclarationStatement::~SgNamespaceDeclarationStatement()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgNamespaceDeclarationStatement::isSgNamespaceDeclarationStatement (SgNode *s)
\brief Cast function (from derived class to SgNamespaceDeclarationStatement pointer).

This functions returns a SgNamespaceDeclarationStatement pointer for any input of a 
pointer to an object derived from a SgNamespaceDeclarationStatement.

\return Returns valid pointer to SgNamespaceDeclarationStatement if input is derived from a SgLocatedNode.
*/

/*!
\fn SgNamespaceDeclarationStatement::isSgNamespaceDeclarationStatement (const SgNode *s)
\brief Cast function (from derived class to SgNamespaceDeclarationStatement pointer).

This functions returns a SgNamespaceDeclarationStatement pointer for any input of a 
pointer to an object derived from a SgNamespaceDeclarationStatement.

\return Returns valid pointer to SgNamespaceDeclarationStatement if input is derived from a SgLocatedNode.
*/

/*!
\fn SgNamespaceDeclarationStatement::get_name() const
\brief Access function for p_name.

\return Returns SgName.
*/

/*!
\fn SgNamespaceDeclarationStatement::set_name(SgName name)
\brief Access function for p_name.

\return Returns void.
*/

/*!
\fn SgNamespaceDeclarationStatement::get_definition() const
\brief Returns pointer to SgNamespaceDefinitionStatement.

\return Returns pointer to SgNamespaceDefinitionStatement.
*/

/*!
\fn SgNamespaceDeclarationStatement::set_definition(SgNamespaceDefinitionStatement* definition)
\brief Access function for p_definition.

\return Returns void.
*/

/*!
\fn SgNamespaceDeclarationStatement::get_isUnnamedNamespace() const
\brief Access function for p_isUnnamedNamespace.

\return Returns SgName.
*/

/*!
\fn SgNamespaceDeclarationStatement::set_isUnnamedNamespace(bool isUnnamedNamespace)
\brief Access function for p_isUnnamedNamespace.

\return Returns void.
*/

