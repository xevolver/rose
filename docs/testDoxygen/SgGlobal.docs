//////////////////////////////////////////////////////////////////////////
// Documentation for class SgGlobal
//////////////////////////////////////////////////////////////////////////

/*!
\class SgGlobal
\brief This class represents the concept of a namespace definition.  

Namespace definitions
are coupled with namespace declarations to defin the namespace (hold the list of
declarations in the namespace.  Within C++ namespaces are "reentrant" and
as a result multiple namespace declarations (SgNamespaceDeclarationStatement) 
and definitions (SgGlobal) may exist for a single namespace.

\note Note that the namespace "std" is special in C++, such that a program
with the statement "using namespace std" can exist all by itself and is a
valid program (even though "std" as a namespace is not defined).

Scopes are an important aspect of language design. They allow
declarations to have a local context and so promote good programming style.
Scope statments in C++ include a number of different kinds of statements;
the SgGlobal is a base class for these. Each scope statement contains
a symbol table and the SgGlobals role is mostly to provide this
symbol table and an interface to accessing it.

\internal This is a base class for scope statements.

\todo Cleanup interface which presently has multiple append,prepend, insert functions. It
might be best to eliminate them and use STL directly.
*/

/*
\sa
\ref SgGlobal_usage  "Example of using a SgGlobal object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgGlobal data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgGlobal::p_declarations
\brief This is an STL list of SgDeclarationStatement objects.

\internal The name is perhaps all too similar to p_declaration (which exists on many IR nodes).
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgGlobal member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgGlobal::SgGlobal ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgGlobal base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgGlobal_create "Example:create an SgGlobal object"
*/

/*!
\fn SgGlobal::~SgGlobal()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgGlobal::isSgGlobal (SgNode *s)
\brief Cast function (from derived class to SgGlobal pointer).

This functions returns a SgGlobal pointer for any input of a 
pointer to an object derived from a SgGlobal.

\return Returns valid pointer to SgGlobal if input is derived from a SgLocatedNode.
*/

/*!
\fn SgGlobal::isSgGlobal (const SgNode *s)
\brief Cast function (from derived class to SgGlobal pointer).

This functions returns a SgGlobal pointer for any input of a 
pointer to an object derived from a SgGlobal.

\return Returns valid pointer to SgGlobal if input is derived from a SgLocatedNode.
*/

/*!
\fn SgGlobal::get_qualified_name() const
\brief Returns SgName (a string) representing the name of the current scope (empty string).

See discussion of mangled names in the documentation.

\return Returns SgName (a string).
*/

/*!
\fn SgGlobal::copy(const SgCopyHelp & help)
\brief Makes a copy (deap of shallow depending on SgCopyHelp).

\return Returns pointer to copy of SgGlobal.
*/

/*!
\fn SgGlobal::get_declarations()
\brief Returns a list to the global scope declarations.

\return Returns an STL list by reference.
*/

/*!
\fn SgGlobal::get_declarations() const
\brief Returns a const list to the global scope declarations.

\return Returns a const STL list by reference.
*/

