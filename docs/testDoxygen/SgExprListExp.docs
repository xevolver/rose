//////////////////////////////////////////////////////////////////////////
// Documentation for class SgExprListExp
//////////////////////////////////////////////////////////////////////////

/*!
\class SgExprListExp
\brief This class represents the concept of a C and C++ expression list.

This is a class used to support multiple IR nodes internally, for example in a
function call "foo(exp,exp)" contains and expression list (SgExprListExp).
This object supports the following IR nodes:
    - SgNewExp
    - SgFunctionCallExp
    - SgAggregateInitializer
    - SgConstructorInitializer

\todo Consider that get_type() returns a SgDefalutType and should return the SgType 
associated with the last expression in the list.

\sa
\ref SgExprListExp_usage  "Example of using a SgExprListExp object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgExprListExp data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgExprListExp::p_conditional_exp
\brief This pointer points to a SgExpression object.

*/

/*! \var SgExprListExp::p_true_exp
\brief This pointer points to a SgExpression object.

*/

/*! \var SgExprListExp::p_false_exp
\brief This pointer points to a SgExpression object.

*/

/*! \var SgExprListExp::p_expression_type
\brief This pointer points to a SgType object.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgExprListExp member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*!
\fn SgExprListExp::SgExprListExp ( Sg_File_Info* startOfConstruct = NULL, SgClassSymbol *symbol = NULL )
\brief This is the constructor.

This constructor builds the SgExprListExp base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgExprListExp_create "Example:create an SgExprListExp object"
*/

/*!
\fn SgExprListExp::~SgExprListExp()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgExprListExp::isSgExprListExp (SgNode *s)
\brief Cast function (from derived class to SgExprListExp pointer).

This functions returns a SgExprListExp pointer for any input of a 
pointer to an object derived from a SgExprListExp.

\return Returns valid pointer to SgExprListExp if input is derived from a SgLocatedNode.
*/

/*!
\fn SgExprListExp::isSgExprListExp (const SgNode *s)
\brief Cast function (from derived class to SgExprListExp pointer).

This functions returns a SgExprListExp pointer for any input of a 
pointer to an object derived from a SgExprListExp.

\return Returns valid pointer to SgExprListExp if input is derived from a SgLocatedNode.
*/

/*!
\fn SgExprListExp::get_conditional_exp() const
\brief Access function for p_conditional_exp.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgExprListExp::set_conditional_exp(SgExpression* conditional_exp)
\brief Access function for p_conditional_exp.

\param conditional_exp is the conditional test expression

\return Returns void.
*/

/*!
\fn SgExprListExp::get_true_exp() const
\brief Access function for p_true_exp.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgExprListExp::set_true_exp(SgExpression* true_exp)
\brief Access function for p_true_exp.

\param true_exp expression to evaluate if test is true.

\return Returns void.
*/

/*!
\fn SgExprListExp::get_false_exp() const
\brief Access function for p_false_exp.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgExprListExp::set_false_exp(SgExpression* false_exp)
\brief Access function for p_false_exp.

\param false_exp expression to evaluate if test is false.

\return Returns void.
*/

/*!
\fn SgExprListExp::get_expression_type() const
\brief Access function for p_expression_type.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgExprListExp::set_expression_type(SgType* expression_type)
\brief Access function for p_expression_type.

Both the p_true_exp and p_false_exp must have the same type.

\param expression_type type of result.

\return Returns void.
*/


