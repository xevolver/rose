//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNewExp
//////////////////////////////////////////////////////////////////////////

/*!
\class SgNewExp
\brief This class represents the concept of a C++ call to the new operator.

\todo Provide some examples to detail the difference between placement, constructor, and
builtin arguments.

\todo I believe we can associate the constructors from the class with 
new operators.

\internal  This is one of the few SgExpression IR nodes that are required to store
the internal type explicitly.  In this case the p_specified_type is used and 
it is set to the type specified in the new expression (e.g. int *x = new int[1000];,
the p_expression_type would be SgTypeInt.  However the return type of the new operator
is a pointer to this type so the get_type() member function returns a pointer to this
type.

\sa
\ref SgNewExp_usage  "Example of using a SgNewExp object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNewExp data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgNewExp::p_expression_type
\brief This pointer points to the type of the variable being allocated.
*/

/*! \var SgNewExp::p_placement_args
\brief This is a pointer to the memory allocation placement arguments for the new
operator.

An example would be "class X{}; void* p; X* item2 = new (p) X();".  Placement arguments
permit the new opperator to allocate space at a specific location (address).

\todo Provide some examples to detail the difference between placement, constructor, and
builtin arguments (these are rarely used in C++).
*/

/*! \var SgNewExp::p_constructor_args
\brief This is a pointer to the constructor initializer (which holds its constructor arguments) for the new operator.

\todo Provide some examples to detail the difference between placement, constructor, and
builtin arguments.
*/

/*! \var SgNewExp::p_builtin_args
\brief This is a pointer to the builtin arguments for the new operator (typically the
"this" pointer where specified optionally).

\todo Provide some examples to detail the difference between placement, constructor, and
builtin arguments.
*/

/*! \var SgNewExp::p_need_global_specifier
\brief This new operator needs to be output with "::".

\internal This should be a bool instead of a short.
*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgNewExp member functions (methods)
/////////////////////////////////////////////////////////////////////////

/*!
\fn SgNewExp::SgNewExp ( Sg_File_Info* startOfConstruct = NULL, SgClassSymbol *symbol = NULL )
\brief This is the constructor.

This constructor builds the SgNewExp base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgNewExp_create "Example:create an SgNewExp object"
*/

/*!
\fn SgNewExp::~SgNewExp()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgNewExp::isSgNewExp (SgNode *s)
\brief Cast function (from derived class to SgNewExp pointer).

This functions returns a SgNewExp pointer for any input of a 
pointer to an object derived from a SgNewExp.

\return Returns valid pointer to SgNewExp if input is derived from a SgLocatedNode.
*/

/*!
\fn SgNewExp::isSgNewExp (const SgNode *s)
\brief Cast function (from derived class to SgNewExp pointer).

This functions returns a SgNewExp pointer for any input of a 
pointer to an object derived from a SgNewExp.

\return Returns valid pointer to SgNewExp if input is derived from a SgLocatedNode.
*/

/*!
\fn SgNewExp::get_variable() const
\brief Access function for p_variable.

\return Returns pointer to SgExpression.
*/

/*!
\fn SgNewExp::set_variable(SgExpression* variable)
\brief Access function for p_variable.

\param variable is the variable to be deleted.

\return Returns void.
*/

/*!
\fn SgNewExp::get_is_array() const
\brief Access function for p_is_array.

\return Returns bool.
*/

/*!
\fn SgNewExp::set_is_array(SgExpression* is_array)
\brief Access function for p_is_array.

\param is_array flag to record use of array delete.

\return Returns void.
*/

/*!
\fn SgNewExp::get_need_global_specifier() const
\brief Access function for p_need_global_specifier.

\return Returns bool.
*/

/*!
\fn SgNewExp::set_need_global_specifier(SgExpression* need_global_specifier)
\brief Access function for p_need_global_specifier.

\param need_global_specifier flag to record use of array delete.

\return Returns void.
*/

