//////////////////////////////////////////////////////////////////////////
// Documentation for class SgDeclarationStatement
//////////////////////////////////////////////////////////////////////////

/*!
\class SgClassDeclaration
\brief This class represents the concept of a class declaration statement. It includes the
concept of an instantiated class template as well.


Declaration statements are where variables and types are
defined and become available for use within a program.  Declarations
are strored in symbols (\ref SgSymbol) and used to associate
the symbol with a location within a scope within the application 
source code.  There are many different types of declarations, within Sage III
the SgDeclaration forms a base class for numerous IR nodes such as:
class declarations (including structs and unions), enum declarations,
function declarations, namespace declarations, pragma declarations,
template declarations, typedef declarations, using declarations,
using directives, variable declarations, etc.

An important concept for a few types fo declarations is that
of defining vs. non-defining.  Defining declarations are associated with
definitions, for example a class definition or function definition.
A class declaration where a class is defined (instead of a forward 
declaration) is a defining declaration.  A forward declaration is
a non-defining declaration.  Some declarations are not explicitly 
forward declarations, they are non-defining declarations.  Only 
declarations where there is a definition are defining declarations. 
Because definitions can at most appear once within a translation unit 
(a source file and it included header files), there is at most one
defining declaration.  The defining declaration is never shared,
however the non-defining declaration can be shared and is required 
to be shared if there is more than one location in the AST where 
a non-defining declaration is required.  There is at most one
defining and one non-defining declaration (at some point they will
also share their name, but this is not implemented yet).  If a variable
is defined to be extern or only defined through a refererence or pointer, 
then there would be no defining declaration (only a non-defining declaration).

The following code contains no defining declaration for the 
type "foobar":

@code
typedef struct foobar *((FunctionPointer)(void);
foobar* foobar_pointer = NULL;
@endcode

and yet is vailid code (even though there is no explicit forward declaration
of "foobar" as a class (or struct).  In this case foobar is represented
using a non-defining declaration internally and that declaration is 
reference multiple types (once within each statement).  Note that
the code abouve is valid C++, and not valid C code (to make it valid C code 
we would have to add "struct" the pointer declaration, for example:

@code
struct foobar* foobar_pointer = NULL;
@endcode

So C++ is not always a super set of C :-).


Different types of declarations explained:
C and C++ declarations can come in several forms, for example:

@code
typedef struct { int A; } A; // unnamed class declaration (which gets a name from the typedef)
struct A { int i; };         // autonomous declaration
struct B { int i; } b;       // non autonomous declaration
@endcode

In these cases "struct" and "class" can be used interchangablily. Internally 
"struct" and "class" are he same (but with a different enum to classify them,
see SgNameType and SgClassType).  Clearly most C++ code uses autonomous 
declarations.

There are no uses of this IR node anywhere.  All statements
are derived from this SgClassDeclaration class.

This is a base class for all statements.

\sa
\ref SgClassDeclaration_usage  "Example of using a SgClassDeclaration object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassDeclaration data members
/////////////////////////////////////////////////////////////////////////

/*!
\var SgClassDeclaration::p_name
\brief This is the name of the class or instantiated class template

\internal The value held is not shared within the Sage III AST.
*/

/*!
\var SgClassDeclaration::p_class_type
\brief Enum value classifying this as a class,struct,or union.

\internal The enum type is also defined in this class.
*/

/*!
\var SgClassDeclaration::p_type
\brief This is the type used in the declaration (SgClassType).

*/

/*!
\var SgClassDeclaration::p_definition
\brief This is the class definition (alway a valid pointer, except for explicitly marked
forward declarations).

When this is a defining or nondefining declartion the p_definition pointer is
always valid.  However, as a separate rule, all forward declarations are both
makred explicit as forward declarations AND have a NULL value for their p_definition 
pointer.

\internal The declaration associated with the definition is the defining declaration and
may not be the same as that pointed to by the "this" pointer.
*/

/*!
\var SgClassDeclaration::p_from_template
\brief This records if the class declaration is associated with a template.

This boolean value is set to true if this is a non-template class nested 
in a templated class.  We have an explicit IR node for template classes, but
this is only flag to indicate that several template specific rules apply to
the declaration of this class if the value is true.  For example, the class
will not be output unless it is transformed, then the required specialization 
is required for the parent templated class.

\internal It is set internally and there is no need for it to be set by the user!
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgClassDeclaration member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgClassDeclaration::SgClassDeclaration ( Sg_File_Info* startOfConstruct = NULL, 
         SgName name = SgdefaultName, int class_type = 0, SgClassType *type=NULL,
         SgClassDefinition *definition=NULL)
\brief This is the only constructor.

This constructor builds the SgClassDeclaration base class. but has some specific
side-effects (some of which have been removed in the latest work).  It is however
still that case that if the definition is provided then it's declaration will be changed
to the declaration being constructed (a warning message it output if this happens and
this side-effect will be removed soon).

\param startOfConstruct represents the position in the source code
\sa 
\ref SgClassDeclaration_create "Example:create an SgClassDeclaration object"
*/

/*!
\fn SgClassDeclaration::~SgClassDeclaration()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.

*/

/*!
\fn SgClassDeclaration::isSgClassDeclaration (SgNode *s)
\brief Cast function (from derived class to SgClassDeclaration pointer).

This functions returns a SgClassDeclaration pointer for any input of a 
pointer to an object derived from a SgClassDeclaration.

\return Returns valid pointer to SgClassDeclaration if input is derived from a SgLocatedNode.
*/

/*!
\fn SgClassDeclaration::isSgClassDeclaration (const SgNode *s)
\brief Cast function (from derived class to SgClassDeclaration pointer).

This functions returns a SgClassDeclaration pointer for any input of a 
pointer to an object derived from a SgClassDeclaration.

\return Returns valid pointer to SgClassDeclaration if input is derived from a SgLocatedNode.
*/

