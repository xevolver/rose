//////////////////////////////////////////////////////////////////////////
// Documentation for class SgSwitchStatement
//////////////////////////////////////////////////////////////////////////

/*!
\class SgSwitchStatement
\brief This class represents the concept of a switch.

\internal Note that the design or some aspect of the design may be the cause of falure to
handle the Duff's Device example code. I think this is not fixed, Oct 2005.

\todo FIXED: The conditional test should be a SgStatement so that a declaration can
be used, it is currently an SgExpression (specifically a SgExpressionRoot).

\todo The body of the SgSwitch should really be a SgStatement not a SgBasicBlock.
DuffsDevice can be modified to should an example of this but there are also
much more trivial examples.  See comment about this in the SgStatement todo list.
*/

/*
\sa
\ref SgSwitchStatement_usage  "Example of using a SgSwitchStatement object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgSwitchStatement data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgSwitchStatement::p_item_selector_root
\brief This pointer a SgExpressionRoot.

\note I think this is a poor name for this variable.

\todo This should be changed to be a SgStatement (to follow the C++ standard).
this way it could be an expression (via an expression statement) or a variable
declaration with initializer (via a SgVariableDeclaration).
We also have the condition specified before the body within the ROSETTA
specification and this causes the traversal to travers the condition and body in the
wrong order (for do-while, the traversal should be body forst and condition second).
See test2005_114.C for more details and example code (example of strange loops).
*/

/*! \var SgSwitchStatement::p_body
\brief This pointer a SgBasicBlock, and holds the cases in the body of the switch.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgSwitchStatement member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgSwitchStatement::SgSwitchStatement ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgSwitchStatement base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgSwitchStatement_create "Example:create an SgSwitchStatement object"
*/

/*!
\fn SgSwitchStatement::~SgSwitchStatement()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgSwitchStatement::isSgSwitchStatement (SgNode *s)
\brief Cast function (from derived class to SgSwitchStatement pointer).

This functions returns a SgSwitchStatement pointer for any input of a 
pointer to an object derived from a SgSwitchStatement.

\return Returns valid pointer to SgSwitchStatement if input is derived from a SgLocatedNode.
*/

/*!
\fn SgSwitchStatement::isSgSwitchStatement (const SgNode *s)
\brief Cast function (from derived class to SgSwitchStatement pointer).

This functions returns a SgSwitchStatement pointer for any input of a 
pointer to an object derived from a SgSwitchStatement.

\return Returns valid pointer to SgSwitchStatement if input is derived from a SgLocatedNode.
*/

/*!
\fn SgSwitchStatement::copy(const SgCopyHelp & help)
\brief Makes a copy (deap of shallow depending on SgCopyHelp).

\return Returns pointer to copy of SgSwitchStatement.
*/

/*!
\fn SgSwitchStatement::get_item_selector() const
\brief Access function for p_item_selector_root.

\return Returns a pointer to a SgExpression.
*/

/*!
\fn SgSwitchStatement::set_item_selector(SgExpression* item_selector)
\brief Access function for p_item_selector.

\param for_init_stmt SgExpression pointer
\return Returns void.
*/

/*!
\fn SgSwitchStatement::get_body() const
\brief Access function for p_body.

\return Returns a pointer to a SgBasicBlock.
*/

/*!
\fn SgSwitchStatement::set_body(SgBasicBlock* body)
\brief Access function for p_body.

\param loop_body SgBasicBlock pointer
\return Returns void.
*/

