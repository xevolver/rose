//////////////////////////////////////////////////////////////////////////
// Documentation for class SgWhileStmt
//////////////////////////////////////////////////////////////////////////

/*!
\class SgWhileStmt
\brief This class represents the concept of a do-while statement.

\internal 

*/

/*
\sa
\ref SgWhileStmt_usage  "Example of using a SgWhileStmt object"
*/


//////////////////////////////////////////////////////////////////////////
// Documentation for class SgWhileStmt data members
/////////////////////////////////////////////////////////////////////////

/*! \var SgWhileStmt::p_condition
\brief This pointer a SgStatement, the conditional expression in the loop construct.

*/

/*! \var SgWhileStmt::p_body
\brief This pointer a SgBasicBlock, and holds the statements in the body of the loop.

*/

/*! \var SgWhileStmt::p_else_body
\brief This pointer to an SgStatement holds the body of the 'else' block.

This member is intended for use with Python, and should be NULL otherwise.

*/

//////////////////////////////////////////////////////////////////////////
// Documentation for class SgWhileStmt member functions (methods)
/////////////////////////////////////////////////////////////////////////
/*!
\fn SgWhileStmt::SgWhileStmt ( Sg_File_Info* startOfConstruct = NULL )
\brief This is the constructor.

This constructor builds the SgWhileStmt base class.

\param startOfConstruct represents the position in the source code
*/
/*
\sa 
\ref SgWhileStmt_create "Example:create an SgWhileStmt object"
*/

/*!
\fn SgWhileStmt::~SgWhileStmt()
\brief This is the destructor.

There are a lot of things to delete, but nothing is deleted in this destructor.
*/

/*!
\fn SgWhileStmt::isSgWhileStmt (SgNode *s)
\brief Cast function (from derived class to SgWhileStmt pointer).

This functions returns a SgWhileStmt pointer for any input of a 
pointer to an object derived from a SgWhileStmt.

\return Returns valid pointer to SgWhileStmt if input is derived from a SgLocatedNode.
*/

/*!
\fn SgWhileStmt::isSgWhileStmt (const SgNode *s)
\brief Cast function (from derived class to SgWhileStmt pointer).

This functions returns a SgWhileStmt pointer for any input of a 
pointer to an object derived from a SgWhileStmt.

\return Returns valid pointer to SgWhileStmt if input is derived from a SgLocatedNode.
*/

/*!
\fn SgWhileStmt::copy(const SgCopyHelp & help)
\brief Makes a copy (deap of shallow depending on SgCopyHelp).

\return Returns pointer to copy of SgWhileStmt.
*/

/*!
\fn SgWhileStmt::get_body() const
\brief Access function for p_body.

\return Returns a pointer to a SgBasicBlock.
*/

/*!
\fn SgWhileStmt::set_body(SgBasicBlock* body)
\brief Access function for p_body.

\param body SgBasicBlock pointer
\return Returns void.
*/

/*!
\fn SgWhileStmt::get_condition() const
\brief Access function for p_condition.

\return Returns a pointer to a SgStatement.
*/

/*!
\fn SgWhileStmt::set_condition(SgStatement* condition)
\brief Access function for p_condition.

\param condition SgStatement pointer
\return Returns void.
*/

