// -*- c++ -*-

/** @page declaration_move Declaration Move Tool
 * 
 * @section sec_overview Overview
 *  This tool will move variable declarations to their innermost possible used scopes.
 * For a declaration, find the innermost scope we can move it into, without breaking the code's original semantics.
 *
 * @li  For a single use place, move to the innermost scope.
 * @li  For the case of multiple uses, we may need to duplicate the declarations and move to two scopes if there is no variable reuse in between, otherwise, we move the declaration into the innermost common scope of the multiple uses.
 *
 * @li source code: https://github.com/rose-compiler/rose-develop/blob/master/tests/roseTests/astInterfaceTests/moveDeclarationToInnermostScope.C
 * @li tests: make move_diff_check defined in https://github.com/rose-compiler/rose-develop/blob/master/tests/roseTests/astInterfaceTests/Makefile.am
 * 
 * @section sec_instructions User Instructions
 * The translator, moveDeclarationToInnermostScope, accepts the following options:

 * @li   -rose:merge_decl_assign will merge the moved declaration with an immediately followed assignment.
 * @li    -rose:aggressive  : turn on the aggressive mode, which will move declarations with initializers, and across loop boundaries. A warning message will be sent out if the move crosses a loop boundary. Without this option, the tool only moves a declaration without an initializer to be safe.
 * @li    -rose:debug, which is turned on by default in the testing. Some dot graph files will be generated for scope trees of variables for debugging purpose.
 * @li    -rose:keep_going will ignore assertions as much as possible (currently on skip the assertion on complex for loop initialization statement list). Without this option, the tool will stop on assertion failures.
 * @li    -rose:identity will turn off any transformations and act like an identity translator. Useful for debugging purposes.
 * @li    -rose:trans-tracking will turn on the transformation tracking mode, showing the source statements of a move/merged declaration
 * @section sec_example Example
 * 
 * For the following input code, Test.cc
 * @code{.cpp}
 *  void AccumulateForce(int *idxBound, int *idxList, int len,
 *                      double *tmp, double *force)
 *  {
 *     register int ii ;
 *     register int jj ;
 *     int count ;
 *     int *list ;
 *     int idx ;
 *     double sum ;
 *     for (ii=0; ii<len; ++ii) {
 *        count = idxBound[ii+1] - idxBound[ii] ;
 *        list = &idxList[idxBound[ii]] ;
 *        sum = 0.0 ;
 *        for (jj=0; jj<count; ++jj) {
 *           idx = list[jj] ;
 *           sum += tmp[idx] ;
 *        }
 *        force[ii] += sum ;
 *     }
 *     return ;
 *  }
 * @endcode 
 * 
 * you can run the move tool as follows to produce the rose_Test.cc output file below:
 * 
 * @code
 *  moveDeclarationToInnermostScope -rose:unparse_tokens -rose:merge_decl_assign -c Test.cc
 * @endcode
 * 
 * There are several things to notice about this command line.  
 * The moveDeclarationToInnermostScope tool acts as a front-end to an underlying compiler, and the command line options for that compiler will be honored.  
 * Here, we also have some ROSE/tool specific command line options.   
 * The '-rose:unparse_tokens' option tells ROSE to take extra care to preserve the source-code formatting from the input source file when producing the rose_xxx.cc output file.  
 * The '-rose:merge_decl_assign' option is specific to the rescoping tool, and indicates that any moved declarations should try to be combined with pre-existing assignment statements in the target scope.
 * 
 * 
 * The output file will look like
 * @code{.cpp}
 *  void AccumulateForce(int *idxBound, int *idxList, int len,
 *                      double *tmp, double *force)
 *  {
 *     for (register int ii = 0; ii<len; ++ii) {
 *        int count = idxBound[ii + 1] - idxBound[ii];
 *        int *list = &idxList[idxBound[ii]];
 *        double sum = 0.0;
 *        for (register int jj = 0; jj<count; ++jj) {
 *           int idx = list[jj];
 *           sum += tmp[idx] ;
 *        }
 *        force[ii] += sum ;
 *     }
 *     return ;
 *  }
 * @endcode
 * 
 * Looking at the transformed source code above, there are several points of interest:
 * @li Any qualifiers associated with declarations are preserved when the declaration is moved.
 * @li Declarations related to for-loop control variables are moved into the loop header.
 * @li Assignments and declarations are merged, due to the presence of the -rose:merge_decl_assign command line option.
 * 
 * @section sec_algorithm Internal Algorithm
 * 
 * Focusing on finding target scopes, since multiple (iterative) declaration moves are unnecessary. 
 * If we know the final scopes to be moved into, we can copy-move a declaration to all target scopes in one shot
 *  @code
 *
 *    Analysis: findFinalTargetScopes (declaration, &target_scopes)
 *        scope_tree_worklist.push(scope_tree);
 *        while (!scope_tree_worklist.empty())
 *            current_scope_tree = scope_tree_worklist.front(); â€¦
 *            collectCandidateTargetScopes(decl, current_scope_tree);
 *                if (found a bottom scope) target_scopes.push_back(candidate)
 *                else scope_tree_worklist.push_back(candiate)
 *    Transformation:
 *        if (target_scopes.size()>0)
 *            copyMoveVariableDeclaration(decl, target_scopes);
 *
 *  @endcode
 *  This page is generated from $ROSE/docs/Rose/Tools/declarationMoveTool.dox */


