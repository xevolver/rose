// -*- c++ -*-

/** @page installation Installing ROSE
 *  How to install ROSE from source code.
 *
 *  @todo Watch out!  This installation guide is our first revision and almost certainly contains errors and omissions. We are
 *        working to combine all of our installation instructions into this single document, at which time those other
 *        documents will be removed. [Robb P. Matzke 2015-09-25]
 *
 *  @section installation_obtaining Obtaining ROSE
 *
 *  ROSE is free (libre) software distributed under a @ref license "modified BSD license". The ROSE team at Lawrence Livermore
 *  National Laboratory makes two kinds of public source releases both as Git repositories.
 *
 *  @li The development releases occur on the "master" branch of https://github.com/rose-compiler/rose-develop. These releases
 *      undergo a limited amount of testing and are intended for those users that require the latest bleeding edge versions
 *      and aren't afraid to get their hands dirty in source code.
 *
 *  @li Once per week the development release goes through a more extensive testing process and a release is pushed to the
 *      "master" branch of https://github.com/rose-compiler/rose if all tests pass.
 *
 *  ROSE can be downloaded with standard Git commands (preferred) or as a Zip archive from the URLs mentioned above.
 *
 *  @code
 *  git clone https://github.com/rose-compiler/rose
 *  cd rose
 *  @endcode
 *
 *  ROSE uses a [continuous delivery](https://en.wikipedia.org/wiki/Continuous_delivery) paradigm and thus does not have
 *  monotonically increasing "x.y.z" style version numbers.  To obtain the identification for a particular version of ROSE, run
 *  "git rev-parse HEAD" in the ROSE source directory (the reported SHA1 hash can be abbreviated to 7 or so characters for
 *  convenience).
 *
 *  The repositories listed above are the official release points; other repositories might be available but are unofficial.
 *  Some members of the ROSE team also distribute custom builds in virtual machines, which can be a good way to get up and
 *  playing quickly. Query one of the ROSE mailing lists to find this information, which changes from time to time.
 *
 *
 *
 *  @section installation_hardware Hardware requirements
 *
 *  ROSE is tested and supported on [Redhat Enterprise
 *  Linux](http://www.redhat.com/en/technologies/linux-platforms/enterprise-linux) RHEL6 and RHEL7 running on Intel x86-64
 *  hardware. Some developers are able to use other operating systems and platforms.
 *
 *  ROSE consists of approximately two million lines of C++ and requires substantial resources to compile. The machine should
 *  have at least eight gigabytes of free RAM available, and the build system can make use of multiple CPU cores. Compiling the
 *  ROSE library (no projects or tests) with all features enabled will take approximately 30 minutes on a 12 core machine with
 *  48 gigabytes of RAM. Developers working on ROSE itself may want to consider using [ccache](https://ccache.samba.org) to
 *  speed up recompiles; rebuilding the library takes about two minutes on the same hardware with ccache.
 *
 *
 *
 *  @section installation_prerequisites Software dependencies
 *
 *  In order to build ROSE from source code, software dependencies should first be installed.
 *
 *  <table>
 *    <tr>
 *      <td><b>Software component</b></td>
 *      <td><b>Necessity</b></td>
 *      <td><b>Supported Versions</b></td>
 *      <td><b>Regularly tested</b></td>
 *      <td><b>Purpose</b></td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://git-scm.com">Git</a></td>
 *      <td>Required</td>
 *      <td>Any recent version</td>
 *      <td>1.7.2.5</td>
 *      <td>Used for cloning the ROSE release repository to your local machine. See @ref installing_git. </td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="https://www.gnu.org/software/wget">wget</a></td>
 *      <td>Required</td>
 *      <td>Any recent version</td>
 *      <td>1.12</td>
 *      <td>Used to download the EDG binary tarball, a C/C++ parser. This is currently (Sep 2015) required even when ROSE is
 *      configured without the C/C++ frontend languages. See @ref installing_wget.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="https://gcc.gnu.org">GNU Compiler Collection</a></td>
 *      <td>Required</td>
 *      <td>GCC-4.2.4 through 4.8.4</td>
 *      <td>GCC-4.4.5</td>
 *      <td>To compile ROSE. The gcc, g++, and gfortran compilers are required. See @ref installing_gcc. </td>
 *    </tr>
 *
 *    <tr>
 *      <td>GNU autotools</td>
 *      <td>Required (or cmake)</td>
 *      <td>automake-1.11.1 or later; autoconf-2.59 or later; libtool-1.5.6 or later</td>
 *      <td><a href="https://www.gnu.org/software/automake">automake-1.11.1</a>,
 *          <a href="http://www.gnu.org/software/autoconf/autoconf.html">autoconf-2.67</a>,
 *          <a href="https://www.gnu.org/software/libtool]">libtool-2.2.6b</a></td>
 *      <td>Automake, autoconf, and libtool are used to configure ROSE and generate makefiles. You can install either this
 *      dependency or the cmake dependency. See @ref installing_autotools.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://www.cmake.org">CMake</a></td>
 *      <td>Required (or autotools)</td>
 *      <td>2.8.12 or later</td>
 *      <td>2.8.12</td>
 *      <td>Configures ROSE and generates makefiles. You can install either this dependency or the GNU autotools. See @ref
 *      installing_cmake.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://flex.sourceforge.net">Flex</a> and <a href="https://www.gnu.org/software/bison">bison</a></td>
 *      <td>Required</td>
 *      <td>Any recent version</td>
 *      <td>flex-2.5.35, bison-2.4.1</td>
 *      <td>Generates code for lexical analyzers and parsers. See @ref installing_flexbison.</td>
 *    </tr>
 *
 *    <tr>
 *      <td>Java Virtual Machine</td>
 *      <td>Required</td>
 *      <td>Sun/Oracle version 7</td>
 *      <td>1.7.0_51</td>
 *      <td>Runtime for Java and Fortran frontends in ROSE. See @ref installing_jre.</td>
 *    </tr>
 *
 *    <tr>
 *      <td>Java Development Kit</td>
 *      <td>Required (cmake)</td>
 *      <td>Any version 7</td>
 *      <td>OpenJDK 7</td>
 *      <td>A JDK is required when configuring ROSE with cmake, even if the Java and Fortran frontends are disabled.
 *          See @ref installing_jdk. Avoid Sun/Oracle version 1.7.0_25.</td>
 *    </tr>
 *    
 *    <tr>
 *      <td><a href="https://www.python.org">Python</a></td>
 *      <td>Required</td>
 *      <td>3</td>
 *      <td>3.1.3</td>
 *      <td>ATerm support in ROSE when using autoconf regardless of whether such support is enabled. See @ref
 *      installing_python.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://www.boost.org">Boost</a></td>
 *      <td>Required</td>
 *      <td>1.47 through 1.53</td>
 *      <td>1.47 through 1.53</td>
 *      <td>C++ portable runtime features. ROSE and/or software used by ROSE requires the following Boost libraries: chrono,
 *      date_time, filesystem, iostreams, program_options, random, regex, signals, system, thread, and wave. See @ref
 *      installing_boost. More info [here](http://theboostcpplibraries.com/).</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://www.stack.nl/~dimitri/doxygen">Doxygen</a></td>
 *      <td>Optional</td>
 *      <td>1.8.1 through 1.8.10</td>
 *      <td>1.8.1</td>
 *      <td>Generates local copies of the online documentation. See @ref installing_doxygen.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://graphviz.org">GraphViz</a></td>
 *      <td>Optional</td>
 *      <td>Any recent version</td>
 *      <td>?</td>
 *      <td>For visualizing graphs such as control flow graphs. See @ref installing_graphviz.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://zvtm.sourceforge.net/zgrviewer.html">ZGRViewer</a></td>
 *      <td>Optional</td>
 *      <td>Any recent version</td>
 *      <td>?</td>
 *      <td>A free Java program for interactive visualization of graphs, supporting features like zooming and panning. See @ref
 *      installing_zgrviewer.</td>
 *    </tr>
 *    
 *    <tr>
 *      <td><a href="http://www.latex-project.org">LaTeX</a></td>
 *      <td>Optional</td>
 *      <td>Any recent version</td>
 *      <td>pdfTeX 3.1415926</td>
 *      <td>For generating PDF documentation from TeX/LaTeX sources.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="https://github.com/kjellmf/dot2tex">dot2tex</a></td>
 *      <td>Optional</td>
 *      <td>Any recent version</td>
 *      <td>?</td>
 *      <td>Generates TeX versions of graphs for inclusion into documentation.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="https://www.qt.io">Qt</a></td>
 *      <td>Optional</td>
 *      <td>4</td>
 *      <td>4</td>
 *      <td>For building ROSE's tools that have a graphical user interface. See @ref installing_qt.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://www.graphicsmagick.org">GraphicsMagick</a></td>
 *      <td>Optional</td>
 *      <td>?</td>
 *      <td>?</td>
 *      <td>See @ref installing_graphicsmagick.</td>
 *    </tr>
 *
 *    <tr>
 *      <td>Relational database system</td>
 *      <td>Optional</td>
 *      <td><a href="https://sqlite.org">SQLite3</a> and/or <a href="http://www.postgresql.org">PostgreSQL</a></td>
 *      <td>SQLite-3.7.3; libpqxx-3.0; postgresql-8.4</td>
 *      <td>For tools that store results in a database. See @ref installing_database.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">GNU readline</a></td>
 *      <td>Optional</td>
 *      <td>?</td>
 *      <td>?</td>
 *      <td>For command-line editing in interactive tools. See @ref installing_readline.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="https://packages.debian.org/unstable/libdevel/libmagic-dev">libmagic</a></td>
 *      <td>Optional</td>
 *      <td>3</td>
 *      <td>3</td>
 *      <td>For identifying magic numbers in binary analysis. See @ref installing_libmagic.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="https://github.com/jbeder/yaml-cpp">yaml-cpp</a></td>
 *      <td>Optional</td>
 *      <td>0.5.1</td>
 *      <td>0.5.1</td>
 *      <td>For reading YAML or JSON configuration files and storing results. Yaml-cpp must be compiled against the same
 *      version of boost used by ROSE. See @ref installing_yamlcpp.</td>
 *    </td>
 *
 *    <tr>
 *      <td><a href="http://dlib.net">Dlib</a></td>
 *      <td>Optional</td>
 *      <td>18.10 - 18.17</td>
 *      <td>18.17</td>
 *      <td>For certain binary analysis algorithms. See @ref installing_dlib.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://www.webtoolkit.eu/wt">Wt</a></td>
 *      <td>Optional</td>
 *      <td>3.3.3 or 3.3.4</td>
 *      <td>3.3.3</td>
 *      <td>For binary analysis tools that present results through a web server. Wt must be compiled against the same version
 *      of Boost used by ROSE. See @ref installing_wt.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://yices.csl.sri.com">Yices</a></td>
 *      <td>Optional</td>
 *      <td>1.0.34</td>
 *      <td>1.0.34</td>
 *      <td>An SMT solver used by certain binary analysis algorithms.</td>
 *    </tr>
 *
 *    <tr>
 *      <td>Cryptography libs</td>
 *      <td>Optional</td>
 *      <td>libssl, libxml-2, libgcrypt-11</td>
 *      <td>libxml-2; libgcrypt-11</td>
 *      <td>For various analysis algorithms that use cryptographic functions. See @ref installing_crypto.</td>
 *    </tr>
 *
 *    <tr>
 *      <td><a href="http://xmlsoft.org">libxml2</a></td>
 *      <td>Optional</td>
 *      <td>Any recent version</td>
 *      <td>?</td>
 *      <td>For parsing XML files in certain tools such as roseHPCT and BinaryContextLookup. See @ref installing_libxml2.</td>
 *    </tr>
 *
 *    <tr>
 *      <td>MPI</td>
 *      <td>Optional</td>
 *      <td>?</td>
 *      <td>?</td>
 *      <td>For features in ROSE that allow for distributed parallel AST traversals.</td>
 *    </tr>
 *
 *    <tr>
 *      <td>Haskell compiler</td>
 *      <td>Optional</td>
 *      <td><a href="http://www.haskell.org/ghc">ghc</a>-6.10.x</td>
 *      <td>ghc-?</td>
 *      <td>For ROSE API Haskell bindings so that tools can be written in Haskell. ROSE does not parse or support
 *      source-to-source analysis and transformation of the Haskell language. See @ref installing_haskell.</td>
 *    </tr>
 *  </table>
 *
 *  @todo Add shell scripts to install the ROSE software dependencies on RHEL and Debian. Most of the instructions are already
 *  available in the docs/readmes directory, but it would be nice if we could include them in the interactive documentation.
 *
 *
 *
 *  @section installation_config Configuring ROSE
 *
 *  ROSE must be configured before it can be built.  Two mechanisms are supported: GNU autotools and CMake. Most tests, tools,
 *  and projects can only be built with autotools at this time (Sep 2015).  Both methods boil down to running some configuration
 *  step that detects (or is told) what optional software is available, and this produces a set of makefiles for building ROSE.
 *
 *  In the instructions that follow, "$ROSE_SRC" is the top-level directory holding the ROSE source code.
 *
 *  @subsection installation_autotools Configuring with GNU autotools
 *
 *  If you desire to configure ROSE with GNU autotools instead of CMake, follow these steps:
 *
 *  @li Run "./build" in the $ROSE_SRC directory. This script takes no arguments and generates the "configure" script used in
 *      the third step. The "build" script must be run when $ROSE_SRC is the current working directory.
 *
 *  @li Create a new directory that will serve as the build area.  The following steps use "$ROSE_BLD" to indicate this
 *      directory.  The $ROSE_BLD directory may be a subdirectory of $ROSE_SRC.
 *
 *  @li Within the $ROSE_BLD directory, run "$ROSE_SRC/configure --help" to get information about what settings are available,
 *      then run "configure" with your chosen switches.  When running "configure" use an absolute path--a name that starts with
 *      "/" rather than "." or ".." (using a relative name can cause some of the tests to fail when they're run in a different
 *      directory). You may also need to add directories to your LD_LIBRARY_PATH on Linux in order for configure to find shared
 *      libraries that you've installed in non-standard places.
 *
 *  @subsection installation_cmake Configuring with CMake
 *
 *  If you desire to configure ROSE with CMake instead of GNU autotools, Follow these steps:
 *
 *  @li Create a new directory that will serve as the build area.  The following steps use "$ROSE_BLD" to indicate this
 *      directory. The $ROSE_BLD directory may be a subdirectory of $ROSE_SRC.
 *
 *  @li Within the $ROSE_BLD directory, run "cmake" and give it the relative name (starting with "..", not "/") of the
 *      $ROSE_SRC directory. The "cmake" command also takes additional switches to specify the final ROSE installation
 *      directory, the locations of software dependencies, and other configuration options. You may also need to add
 *      directories to your LD_LIBRARY_PATH on Linux in order for cmake to find shared libraries that you've installed in
 *      non-standard places.
 *
 *  @todo Document how to get the list of variables that can be set with the "-D" switch for the "cmake" command.
 *
 *
 *
 *  @section installation_build Building the library
 *
 *  To build and install the ROSE library, run "make -C $ROSE_BLD install-rose-library". If you run "make" without specifying
 *  the "install-rose-library" target then additional tests, projects, and tutorials are also built. You may specify an amount
 *  of parallelism with make's "-j" switch.  Ensure that your machine meets the minimum hardware requirements before
 *  starting. A parallel build will require more than the minimum.
 *
 *  If you encounter errors about downloading EDG binary tarballs, see @ref installing_edg.
 *
 *  If you modify a ROSE header file then run "make -C $ROSE_BLD clean" before rebuilding if you're using GNU automake (not
 *  necessary for CMake).
 *
 *  If you're installing a different version of ROSE (or you've made modifications and are re-running "make install"), it is
 *  prudent to first remove the original installation directory to prevent the new installation from containing a mix of old
 *  and new versions.
 *
 *  The "check" targets in the makefiles run a variety of tests, most of which are also run by the automated continuous
 *  integration and release testing.
 *
 *
 *
 *  @section installation_using Using the library
 *
 *  Once the ROSE library has been configured, built, and installed it can be used. Any program that uses ROSE will likely need
 *  to be compiled with the same switches and software components as ROSE itself.  The easiest way to get this information is
 *  by running "rose-config --help".
 *
 *  Here's an example makefile:
 *
 *  @includelineno SampleMakefile
 *
 *
 *
 *  @section installation_nextsteps Next steps
 *
 *  If you're interested in source code analysis or source-to-source translation, read the [ROSE
 *  tutorial](http://rosecompiler.org/ROSE_Tutorial/ROSE-Tutorial.pdf). If you're interested in binary analysis try @ref
 *  binary_tutorial.
 *
 *  This page is generated from $ROSE/docs/Rose/Installation/100_Installation.dox */

/** @defgroup software_dependencies Software dependencies
 *
 *  Software on which ROSE depends. */
