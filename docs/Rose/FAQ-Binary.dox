// -*- c++ -*-

// This is the doxygen source for the binary analysis FAQ and also serves as an example for writing documentation that's not
// related to any particular element of the ROSE API (i.e., this document is a doxygen "@page").  See
// docs/testDoxygen/HowToDocumentROSE.docs details about style, etc.

namespace rose {
namespace BinaryAnalysis {

/** @page binary_faq Binary analysis FAQ
 *
 *  Frequently asked questions about binary analysis with answers.
 *
 *  These are questions that have been asked by users and answered (or at least reviewed) by a ROSE developer.
 *
 **********
 * @section binfaq_general General information
 *
 * @subsection binfaq_general_1 Q1. What does binary analysis have to do with source-to-source translation?
 *
 *  ROSE was, and is still primarily, a source-to-source compiler. But it turns out that much of what happens in source code
 *  analysis can be applied to binary analysis.  For instance, parsing of an ELF or PE container (the non-instructions,
 *  non-initialized data parts of an executable) is much like parsing source code: some files are read, an abstract syntax
 *  tree is produced, and the tree can be analyzed and modified, and unparsed to create a new container. Disassembly produces
 *  instructions that have static information much like a statement in a source language. Binaries have control flow graphs,
 *  call graphs, data flow, etc. that's very similar to source code. A goal is to be able to unify source and binary analysis
 *  as much as possible.
 *
 * @subsection binfaq_general_2 Q2. I'm interested in binary analysis. Where is a good place to start?
 *
 *  Most of the binary analysis capabilities are documented in the library itself and are part the doxygen output. The best
 *  place to start is the @ref rose::BinaryAnalysis "BinaryAnalysis" namespace.  In short,
 *
 *  + ROSE parses an ELF (Unix) or PE/DOS (Windows) container (executable, library, object file, or core dump) and builds an
 *    abstract syntax tree (AST).
 *
 *  + It then invokes a @ref BinaryLoader to map sections of that container into a @ref MemoryMap that simulates the address
 *    space of a process.  The BinaryLoader can also do limited dynamic linking and relocation fixups.
 *
 *  + Non-container sources are then mapped into memory. These are things like files of raw data that aren't in an ELF or PE
 *    container (e.g., some firmware and memory dumps), Motorola S-records, memory of a running process, etc.
 *
 *  + A @ref Disassembler and @ref Partitioner2 "Partitioner" then try to distinguish code from data, disassemble instructions
 *    and static data, and partition instructions into basic blocks functions. The instructions are inserted into the AST.
 *
 *  + Instruction @ref InstructionSemantics2::BaseSemantics "semantics" map instructions into low-level RISC-like
 *    operations. Most analysis occurs at this level.
 *
 *  + Various kins of analysis can be performed and can make limited changes to the AST.
 *
 *  + An @ref AsmUnparser can generate an assembly listing (for human consumption, not reassembly), the @ref backend can
 *    generate a new executable, the @ref Partitioner2::GraphViz "GraphViz" class can generate graphs.
 *
 * @subsection binfaq_general_3 Q3. Why is binary analysis slow, and what can I do about it?
 *
 *  ROSE has extensive invariant checks (i.e., @c assert), encapsulation, and polymorphic classes.  When compiling ROSE, make
 *  sure to turn on optimizations (e.g., <code>-O3 -fomit-frame-pointer</code>), turn off assertion checking
 *  (<code>-DNDEBUG</code>), and turn off interator checking (i.e., don't define @c _GLIBCXX_DEBUG). Also use optimized
 *  versions of libraries, especially Boost libraries.  Doing these can easily make ROSE three or four times faster.
 *
 *  The disassembler in ROSE is different than most. First of all, by default it uses a recursive descent algorithm that
 *  requires a certain amount of reasoning about instructions, some of which may invoke an external SMT solver. One can use a
 *  linear disassembly instead (see projects/BinaryAnalysisTools/linearDisassemble.C) but then most analysis capabilities are
 *  sacrificed because there's no control flow graph. Other options are to turn off SMT usage or use the Yices library instead
 *  of a separate SMT executable. Secondly, being an analysis framework, ROSE's disassembler and instruction semantics APIs are
 *  more modular, complex, and configurable than simple disassemblers, and this comes at a cost.
 *
 **********
 * @section binfaq_disassembly Disassembling and partitioning
 *
 * @subsection binfaq_disassembly_1 Q1. What is "partitioning"?
 *
 *  Unlike many disassemblers that use a linear sweep through memory disassembling everything they encounter, ROSE uses a
 *  recursive approach.  It starts with a set of addresses obtained from the user or from parsing the ELF or PE container,
 *  disassembles an instruction, and then uses instruction semantics to determine the next possible values for the instruction
 *  pointer register. It then adds those addresses to its work list, repeating until the worklist is empty. This not only
 *  generates the individual instructions (@ref SgAsmInstruction), but also a global control flow graph (CFG).  The next step
 *  is to group instructions together to form functions, essentially coloring parts of the control flow graph, thereby
 *  partitioning its vertices into smaller subgraphs.
 *
 * @subsection binfaq_disassembly_2 Q2. Why does ROSE use basic blocks?
 *
 *  ROSE's definition of basic block (BB) relaxes the usual requirement that a BB's instructions be contiguous and
 *  non-overlapping in memory, and instead uses only control flow properties: a BB's instructions are always executed
 *  sequentially from the first to the last.  ROSE uses BBs in most of its analysis because at the semantics level, a BB and an
 *  individual instruction are indistinguishable, but a BB "does more". Most analysis is more efficient when it's able to
 *  perform larger units of work.
 *
 * @subsection binfaq_disassembly_3 Q3. Why are there two partitioners?
 *
 *  There are actually three. Originally the @ref BinaryAnalysis::Disassembler had its own recursive-descent algorithm and
 *  those functions are still present for backward compatibility (we'll likely deprecate them once @ref Partitioner2 is
 *  ready). The @ref BinaryAnalysis::Partitioner was the first version to exist separately from the disassembler and is the
 *  version currently (June 2015) used by ROSE's @ref frontend function.  This one is well tested, but doesn't allow for much
 *  customization. In confusing situations it sometimes creates far more "functions" than what actually exist. Finally, the
 *  @ref Partitioner2 is a completely new design that allows users to customize how partitioning is performed. It is currently
 *  under development, although many new tools are already using it.  Its main drawback is that it goes to the opposite
 *  extreme of @ref Partitioner, failing to create functions for code with confusing CFG (this is a temporary condition, and in
 *  any case, users have enough information to create additional functions from the missed instructions).
 *
 * @subsection binfaq_disassembly_4 Q4. Why is ROSE's CFG structured the way it is?
 *
 *  ROSE has many CFGs that it uses internally, some of which are exposed through an API.  For instance, the @ref Partitioner2
 *  has a CFG that it creates while discovering instructions, and a resulting global CFG at the end. Many users find this CFG
 *  convenient for analysis, but others need things to be a bit different.  The good news is that CFGs are copiable, so all one
 *  needs to do is copy the CFG and then make any adjustments he needs for his analysis. There are also @c V_USER_DEFINED and
 *  @c E_USER_DEFINED vertex and edge types if one needs to insert special things into the graph (they carry no data, so a
 *  separate lookup table may be required). The @ref Partitioner2 basic blocks, functions, etc. have a mechanism for attaching
 *  arbitrary data.
 *
 *  Specifically, the @ref Partitioner2 CFG has a single vertex to represent an indeterminate address, and all function return
 *  sites branch to this vertex.  A function call site has an extra "call-return" edge from the call site to the point where
 *  the called function would return.
 *
 **********
 * @section binfaq_cfg Control flow graphs
 *
 * @subsection binfaq_cfg_1 Q1. 
 **********
 * @section binfaq_semantics Instruction semantics
 *
 * @subsection binfaq_semantics_1 Q1. Why not store semantics in the AST?
 *
 *  Instruction semantics are encoded as C++ code instead of explicitly stored in the AST as subtrees of @ref SgAsmInstruction
 *  for two main reasons:
 *
 *  + Storing them in the AST would make the AST many times larger. Consider the x86 parity status flag that needs to be
 *    set based on whether the result of an arithmetic operation has an odd or even number of bits set. This is compounded by
 *    the fact that subtrees cannot be shared in the AST because there are no immutability guarantees and because each @ref
 *    SgNode has only one parent pointer.
 *
 *  + Implementing semantics in C++ code means that users have ample opportunities to control how and what gets stored for
 *    the semantics.
 *
 *  But having said that, ROSE does have the ability to represent semantics within the AST. See @ref
 *  InstructionSemantics2::StaticSemantics "StaticSemantics".  The approach used by this relatively simple semantic domain can
 *  be used to construct pretty much any kind of semantic data structure the user wants.
 *
 * @subsection binfaq_semantics_2 Q2. Why not use SgExpression AST nodes as symbolic expression?
 *
 *  We decided to use @ref SymbolicExpr instead because:
 *
 *  + Symbolic expressions are used in many places besides abstract syntax trees. E.g., as intermediate and final results in
 *    an analysis.
 *
 *  + AST node design prevents common subexpressions from sharing the same expression trees.  In particular,
 *    SymbolicExpr nodes are immutable, AST nodes are not. Also AST nodes point to their unique parent.
 *
 *  + AST nodes don't have an easy way to track ownership, which becomes important when multiple analyses are using and
 *    generating expressions and who knows what has references to parts of a tree.  We end up in a situation where no
 *    analysis frees anything because it's afraid that something else might be referencing it still.
 *
 * @subsection binfaq_semantics_3 Q3. Is it possible to generate an SgExpression AST from semantics?
 *
 *  Yes. In fact, the semantics were designed specifically for generating a variety of data structures, and the ROSE AST is
 *  just one possibility. Some examples:
 *
 *  + The @ref InstructionSemantics2::SymbolicSemantics "SymbolicSemantics" domain generates @ref SymbolicExpr trees
 *    from the semantics encoded in the various @ref InstructionSemantics2::BaseSemantics::Dispatcher "Dispatcher" classes.
 *
 *  + SMT solver input is generated from SymbolicExpr. It could have also been generated directly from the
 *    semantics instead of going through this intermediate step, but the intermediate step is important because, as stated in
 *    another answer, InsnInstructionExpr is used for things besides instruction semantics.
 *
 *  By default, the AST is not populated with instruction semantics because we've found the virtual representation to be more
 *  flexible and uses less memory.  But if you want them, see @ref InstructionSemantics2::StaticSemantics "StaticSemantics".
 *
 * @subsection binfaq_semantics_4 Q4. How does one access the memory of a binary specimen?
 *
 *  ROSE provides at least two levels of access. If all you've done is parse a binary container (ELF, PE) then you can traverse
 *  the AST to find the @ref SgAsmGenericFile or @ref SgAsmGenericSection in which you're interested and use one of its methods.
 *  
 *  If the @ref BinaryLoader has executed then you can traverse the AST to find a @ref SgAsmInterpretation, which has a method
 *  to return a @ref MemoryMap.
 *
 * @subsection binfaq_semantics_5 Q5. How can semantics be made to use specimen memory?
 *
 *  Some implementations of @ref InstructionSemantics2::BaseSemantics::RiscOperators "RiscOperators" have
 *  a method that can be called to set the memory map. However, many of these semantics will only read from memory locations
 *  that are non-writable because they assume that such memory will not change during the execution of a program. You might
 *  need to remove the write access for parts of a memory map, and this can be done by copying the map (a cheap operation) and
 *  using the @ref MemoryMap API.
 *
 *  But let's say you want to use a semantic domain like @ref InstructionSemantics2::SymbolicSemantics "SymbolicSemantics" that
 *  doesn't have such a method. In that case, you'll need to subclass @ref
 *  InstructionSemantics2::SymbolicSemantics::RiscOperators "RiscOperators" and augment its @ref
 *  InstructionSemantics2::SymbolicSemantics::RiscOperators::readMemory "readMemory" method to do what you want, namely, read
 *  the memory and construct a new symbolic value from what was read.
 *
 * @subsection binfaq_semantics_6 Q6. How do I add a data member to an existing SValue?
 *
 *  To extend an SValue, create a new SValue class that inherits from an existing SValue. @ref
 *  InstructionSemantics2::BaseSemantics::SValue is the base class of the SValue hierarchy.  As described @ref
 *  InstructionSemantics2 "here", the convention is that each semantic domain has a number of main components
 *  enclosed in a namespace.  If you're not overriding all of the components then add typedefs for those that you're not
 *  overriding in order that all the main components are defined in your namespace.
 *
 *  Within your new SValue class, add whatever members you need.  You may inherit or augment the virtual constructors; they
 *  are: @c undefined_, @c number_, @c boolean_, and @c copy (all but @c boolean_ are pure virtual in the base class).  For
 *  most other semantic classes the virtual constructors are named @c create and @c clone.  You'll also need a static method to
 *  create new allocated instances; the convention is to name this method @c instance.  You might want to augment the @c
 *  may_equal and @c must_equal if your new data member affects value equality.  You might also want the @c print method to
 *  output your new data members, and perhaps a new @ref InstructionSemantics2::BaseSemantics::Formatter "Formatter" to control
 *  whether and how those members are printed.
 *
 *  If your new SValue data members are set/modified as the result of some RISC operation, then you must also define a new
 *  RiscOperators class that inherits ultimately from @ref InstructionSemantics2::BaseSemantics::RiscOperators. Usually your
 *  RiscOperators will inherit from the RiscOperators defined in the same namespace as your new SValue class's superclass. You
 *  need to override only those RiscOperators operators whose behavior will be different (a list can be found @ref
 *  InstructionSemantics2::BaseSemantics::RiscOperators "here"), plus provide implementations for the virtual constructors. Any
 *  operators that you don't override will use the virtual constructor mechanism (the SValue virtual constructors mentioned
 *  above) to construct your new SValue objects from a prototypical SValue specified when the RiscOperators was created.  Your
 *  new RiscOperators methods should <em>never</em> create an SValue using a specific class name--doing so will make your
 *  operators less user friendly.
 *
 *  We highly recommend that you test your new semantic domain with @ref InstructionSemantics2::TestSemantics, which tries to
 *  catch most type-related errors in your new classes and their direct super classes.  If you plan to submit your semantics
 *  back to ROSE (or you want an easy way to test your semantics against real programs), then the
 *  projects/BinaryAnalysisTools/debugSemantics.C should be modified to support your semantics domain.
 *
 * @subsection binfaq_semantics_7 Q7. Can I attach information to symbolic expressions?
 *
 *  It is not possible to directly attach user-defined data to the @ref SymbolicExpr::TreeNode that serves as a base class
 *  for symbolic expressions and which is pointed to by the values (i.e., @c SValue) of the instruction semantic's
 *  @ref InstructionSemantics2::SymbolicSemantics "symbolic domain".  One reason is that these trees undergo extensive
 *  simplification both within ROSE and possibly within other tools, and user-defined data would likely get lost in the
 *  translation. Not to mention that user-defined data might even need to influence how simplifications or other
 *  transformations would occur.
 *
 *  However, one can attach arbitrary information to the @c SValue classes. This is done by subclassing @c SValue to add new
 *  data members, and subclassing and overriding any necessary methods in @c RiscOperators that might need to know about the
 *  user-defined data members. It's described in the answer to a previous question. */

} // namespace
} // namespace
