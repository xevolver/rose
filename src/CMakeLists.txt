#										-*- cmake -*-
set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Ddisc_union=union" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ddisc_union=union" )

include_directories(
  ${Boost_INCLUDE_DIRS}
  ${CMAKE_BINARY_DIR}/src/roseSupport
  ${CMAKE_SOURCE_DIR}/src/roseExtensions/failSafe
  ${CMAKE_SOURCE_DIR}/src/midend/programTransformation/transformationTracking
  ${CMAKE_BINARY_DIR}/src/3rdPartyLibraries/fortran-parser
#-------------------------------------------------------------------------------
# TOO1 (3/6/2014): Add Java includes for sageInterface.C: jni.h, jni_md.h, ecj.h
#-------------------------------------------------------------------------------
  ${JAVA_INCLUDE_PATH}
  ${JAVA_INCLUDE_PATH2}
  ${CMAKE_SOURCE_DIR}/src/frontend/ECJ_ROSE_Connection
# DQ (3/8/2014): Added new include path fo RoseAst.h used in sageInterface.C and sageBuilder.C files.
  ${CMAKE_SOURCE_DIR}/src/midend/astMatching
  ${CMAKE_SOURCE_DIR}/src/util
  ${CMAKE_SOURCE_DIR}/src/frontend
  ${ROSE_INCLUDES})


#Headers generated by ROSETTA
# Must keep the list up-to-date,
# Make will repeatedly run the make rule if one of them no longer exists
set(ROSETTA_HEADERS
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AST_FILE_IO.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AstQueryMemoryPool.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarMemoryPoolSupport.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.h
)

#source files generated by ROSETTA
set(ROSETTA_SRC
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCopyMemberFunctions.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarGetChildIndex.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarMemoryPoolSupport.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewAndDeleteOperators.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewConstructors.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarProcessDataMemberReferenceToPointers.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnClassHierarchySubTree.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnDataMemberPointers.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarRTI.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTraverseMemoryPool.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalSuccessorContainer.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarVariantEnumNames.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AST_FILE_IO.C)

#Tell cmake that these files are generated by ROSETTA and will only be available at compile time
SET_SOURCE_FILES_PROPERTIES(
  ${ROSETTA_SRC}
  ${ROSETTA_HEADERS}
  PROPERTIES GENERATED 1
)

if(MSVC)
  set_source_files_properties(
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/StorageClasses.C
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.C
    PROPERTIES COMPILE_FLAGS /bigobj)
endif()

##Tell cmake that these files are generated by the binary frontend
#SET_SOURCE_FILES_PROPERTIES(
#     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/armInstructionEnumPrinter.C
#     ${CMAKE_BINARY_DIR}/src/frontend/BinaryDisassembly/powerpcInstructionEnumPrinter.C
#     PROPERTIES GENERATED 1
#     )
#
## Tell cmake that this file is generated (see scripts/publicConfiguration.pl)
#SET_SOURCE_FILES_PROPERTIES(
#     ${CMAKE_BINARY_DIR}/rosePublicConfig.h
#     PROPERTIES GENERATED 1
#     )


####### ADDING DIRECTORIES
add_subdirectory(util)
add_subdirectory(ROSETTA)
add_subdirectory(roseSupport)
add_subdirectory(3rdPartyLibraries)
add_subdirectory(roseIndependentSupport)
add_definitions(-DROSE_DLL_EXPORTS)
if (NOT enable-internalFrontendDevelopment)
  add_subdirectory(roseExtensions)
endif()

add_subdirectory(frontend)
add_subdirectory(midend)
add_subdirectory(backend)


########### next target ###############
set(rose_LIB_SRCS
  dummyCppFileForLibrose.C
  ${ROSETTA_SRC}
  $<TARGET_OBJECTS:unparser>
  $<TARGET_OBJECTS:sage3>
  $<TARGET_OBJECTS:virtualCFG>
  $<TARGET_OBJECTS:astFromString>
  $<TARGET_OBJECTS:roseSupport>
  $<TARGET_OBJECTS:rosePartitioner2>
  $<TARGET_OBJECTS:roseDisassemblers>
  $<TARGET_OBJECTS:roseBinaryFormats>
  $<TARGET_OBJECTS:roseBinaryLoader>
  $<TARGET_OBJECTS:roseAsmUnparser>
  $<TARGET_OBJECTS:astMerge>
  $<TARGET_OBJECTS:astFixup>
  $<TARGET_OBJECTS:midend>
  $<TARGET_OBJECTS:abstractHandle>
  $<TARGET_OBJECTS:abstractLayer>
  $<TARGET_OBJECTS:astDiagnostics>
  $<TARGET_OBJECTS:astProcessing>
  $<TARGET_OBJECTS:astMatching>
  $<TARGET_OBJECTS:midend_util>
  $<TARGET_OBJECTS:midend_binary>
  $<TARGET_OBJECTS:midend_pt>
  $<TARGET_OBJECTS:sageInterface>
  $<TARGET_OBJECTS:astTokenStream>
  $<TARGET_OBJECTS:astHiddenTypeAndDeclarationLists>
  $<TARGET_OBJECTS:astVisualization>
  $<TARGET_OBJECTS:includeDirectivesProcessing>
  $<TARGET_OBJECTS:astPostProcessing>
  $<TARGET_OBJECTS:failsafe>
  $<TARGET_OBJECTS:trans_tracking>
  $<TARGET_OBJECTS:binaryFrontend>
  $<TARGET_OBJECTS:astRewriteMechanism>
  $<TARGET_OBJECTS:mstl>
)


if(enable-java)
  list(APPEND rose_LIB_SRCS $<TARGET_OBJECTS:roseJava>)
endif()

if (enable-php)
  list(APPEND rose_LIB_SRCS $<TARGET_OBJECTS:phpFrontend>)
endif()


if (NOT enable-internalFrontendDevelopment)
  list(APPEND rose_LIB_SRCS
    $<TARGET_OBJECTS:midend_pa>
    $<TARGET_OBJECTS:midend_loopproc>)
endif()


if(enable-rosehpct)
  list(APPEND rose_LIB_SRCS $<TARGET_OBJECTS:roseExtensions>)
endif()
find_package(Perl REQUIRED)

################################################################################
### The rose_config.h file generated during the configuration process contains
### CPP symbols that indicate what features are available during compilation.
### This file cannot be included into end-user source code because it pollutes
### the global namespace.  Therefore, we create a copy called rosePublicConfig.h
### containing only certain symbols and whose names are modified by prepending
### "ROSE_".
add_custom_command(
     OUTPUT ${CMAKE_BINARY_DIR}/rosePublicConfig.h
     COMMAND ${PERL_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/publicConfiguration.pl <${CMAKE_BINARY_DIR}/rose_config.h >${CMAKE_BINARY_DIR}/rosePublicConfig.h
     DEPENDS ${CMAKE_BINARY_DIR}/rose_config.h
     )
add_custom_target(
     generate_rosePublicConfig
     DEPENDS ${CMAKE_BINARY_DIR}/rosePublicConfig.h
     )

################################################################################

add_library(ROSE_DLL SHARED ${rose_LIB_SRCS} )
target_link_libraries(ROSE_DLL ${link_with_libraries})
# Generate the list of libraries that ROSE needs to link against.
# tps : independant Components : ROSE, libhpdf
set(LINK_FILES
   roseutil
   poet
#   PHP_FRONTEND_LIB
   libhpdf
#   libdl
   ${CMAKE_DL_LIBS}
   libX10Traversal
)
#add_executable(bill bill.C)
#target_link_libraries(bill roseutil)

if (have_EDG_source OR NOT WIN32)
  list(APPEND LINK_FILES EDG)
else()
  add_definitions(-DUSE_FAKE_EDG)
endif()

if(enable-fortran)
  list(APPEND LINK_FILES roseFortran)
endif()

if (enable-java)
  list(APPEND LINK_FILES ${JAVA_JVM_LIBRARY})
endif()

if(enable-python)
  list(APPEND LINK_FILES unparsePython rosePythonFrontend)
endif()

if(enable-rosehpct)
  list(APPEND LINK_FILES ${LIBXML2_LIBRARIES})
endif()

if ( enable-smaller-generated-files )
  set(ROSE_TARGET_LINK libgeneratedIR ${LINK_FILES})
else ( enable-smaller-generated-files )
  # tps (12/14/2009) : Created a variable for the dependend libraries.
  # Make sure that order is correct.
  set(ROSE_TARGET_LINK ${LINK_FILES})
endif ( enable-smaller-generated-files )

if (WIN32)
  target_link_libraries(ROSE_DLL ${ROSE_TARGET_LINK} shlwapi.lib Ws2_32.lib)
else ()
  target_link_libraries(ROSE_DLL ${ROSE_TARGET_LINK} )
endif ()

set_target_properties(ROSE_DLL PROPERTIES
  VERSION 1.0.0
  SOVERSION 1
  DEFINE_SYMBOL ROSE_DLL_EXPORTS
)

add_dependencies(ROSE_DLL
  OMPPARSER ROSE_PREPROCESSOR ${edg_lib} libhpdf
  generate_rosePublicConfig poet)


########### next targets ###############
remove_definitions(-DROSE_DLL_EXPORTS)
add_executable(testSharedRoseLib testRoseLib.C)
target_link_libraries(testSharedRoseLib
  ROSE_DLL ${edg_lib} ${link_with_libraries})


########### install files ###############
install(TARGETS ROSE_DLL DESTINATION lib)
install(
  FILES
    rose.h roseInternal.h rose_msvc.h msvc_stdint.h
    ${CMAKE_BINARY_DIR}/rosePublicConfig.h
  DESTINATION ${INCLUDE_INSTALL_DIR})

