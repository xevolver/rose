module fast2sage

imports
   libstratego-lib
   FAST
   SgUntyped

signature
  constructors

    no-label                  : NoLabel         // R312
    no-program-stmt           : NoProgramStmt   // R1102
    no-program-name           : NoProgramName   // R1103

    // SgToken:ROSE_Fortran_Keywords
    //
    FORTRAN_ABSTRACT          : FORTRAN_ABSTRACT
    FORTRAN_ACCESS            : FORTRAN_ACCESS
    FORTRAN_ACTION            : FORTRAN_ACTION
    FORTRAN_ALLOCATE          : FORTRAN_ALLOCATE
    FORTRAN_ALLOCATABLE       : FORTRAN_ALLOCATABLE
    FORTRAN_ASSIGN            : FORTRAN_ASSIGN
    FORTRAN_ASSOCIATE         : FORTRAN_ASSOCIATE
    FORTRAN_ASYNCHRONOUS      : FORTRAN_ASYNCHRONOUS
    FORTRAN_BACKSPACE         : FORTRAN_BACKSPACE
    FORTRAN_BIND              : FORTRAN_BIND
    FORTRAN_BLANK             : FORTRAN_BLANK

    FORTRAN_BLOCK             : FORTRAN_BLOCK        // TODO: add to ROSE

    FORTRAN_BLOCK_DATA        : FORTRAN_BLOCK_DATA
    FORTRAN_CALL              : FORTRAN_CALL
    FORTRAN_CHARACTER         : FORTRAN_CHARACTER
    FORTRAN_CLASS             : FORTRAN_CLASS
    FORTRAN_CLOSE             : FORTRAN_CLOSE
    FORTRAN_CONTINUE          : FORTRAN_CONTINUE
    FORTRAN_CYCLE             : FORTRAN_CYCLE
    FORTRAN_CASE              : FORTRAN_CASE
    FORTRAN_COMMON            : FORTRAN_COMMON
    FORTRAN_COMPLEX           : FORTRAN_COMPLEX
    FORTRAN_CONTAINS          : FORTRAN_CONTAINS
    FORTRAN_DEALLOCATE        : FORTRAN_DEALLOCATE
    FORTRAN_DATA              : FORTRAN_DATA
    FORTRAN_DEFERRED          : FORTRAN_DEFERRED
    FORTRAN_DELIM             : FORTRAN_DELIM
    FORTRAN_DIMENSION         : FORTRAN_DIMENSION
    FORTRAN_DO                : FORTRAN_DO
    FORTRAN_DT                : FORTRAN_DT
    FORTRAN_DOUBLEPRECISION   : FORTRAN_DOUBLEPRECISION
    FORTRAN_ENCODING          : FORTRAN_ENCODING
    FORTRAN_END_CASE          : FORTRAN_END_CASE
    FORTRAN_ENDDO             : FORTRAN_ENDDO
    FORTRAN_END_FILE          : FORTRAN_END_FILE
    FORTRAN_END_ENUM          : FORTRAN_END_ENUM
    FORTRAN_END_INTERFACE     : FORTRAN_END_INTERFACE
    FORTRAN_END_TYPE          : FORTRAN_END_TYPE
    FORTRAN_ERR               : FORTRAN_ERR
    FORTRAN_ERRMSG            : FORTRAN_ERRMSG
    FORTRAN_EXIT              : FORTRAN_EXIT
    FORTRAN_ELSE              : FORTRAN_ELSE
    FORTRAN_ELSEWHERE         : FORTRAN_ELSEWHERE
    FORTRAN_ELSEIF            : FORTRAN_ELSEIF
    FORTRAN_ENDIF             : FORTRAN_ENDIF
    FORTRAN_ENTRY             : FORTRAN_ENTRY
    FORTRAN_END               : FORTRAN_END
    FORTRAN_ENUM              : FORTRAN_ENUM
    FORTRAN_ENUMERATOR        : FORTRAN_ENUMERATOR
    FORTRAN_EQUIVALENCE       : FORTRAN_EQUIVALENCE
    FORTRAN_EXTERNAL          : FORTRAN_EXTERNAL
    FORTRAN_EXTENDS           : FORTRAN_EXTENDS
    FORTRAN_FILE              : FORTRAN_FILE
    FORTRAN_FINAL             : FORTRAN_FINAL
    FORTRAN_FMT               : FORTRAN_FMT
    FORTRAN_FORALL            : FORTRAN_FORALL
    FORTRAN_FORM              : FORTRAN_FORM
    FORTRAN_FORMATTED         : FORTRAN_FORMATTED
    FORTRAN_FORMAT            : FORTRAN_FORMAT
    FORTRAN_FLUSH             : FORTRAN_FLUSH
    FORTRAN_FUNCTION          : FORTRAN_FUNCTION
    FORTRAN_GENERIC           : FORTRAN_GENERIC
    FORTRAN_GOTO              : FORTRAN_GOTO
    FORTRAN_ID                : FORTRAN_ID
    FORTRAN_IF                : FORTRAN_IF
    FORTRAN_INQUIRE           : FORTRAN_INQUIRE
    FORTRAN_INTEGER           : FORTRAN_INTEGER
    FORTRAN_IOMSG             : FORTRAN_IOMSG
    FORTRAN_IOSTAT            : FORTRAN_IOSTAT
    FORTRAN_IMPLICIT          : FORTRAN_IMPLICIT
    FORTRAN_IMPLICIT_NONE     : FORTRAN_IMPLICIT_NONE
    FORTRAN_IMPORT            : FORTRAN_IMPORT
    FORTRAN_INTERFACE         : FORTRAN_INTERFACE
    FORTRAN_INTENT            : FORTRAN_INTENT
    FORTRAN_INTRINSIC         : FORTRAN_INTRINSIC
    FORTRAN_LEN               : FORTRAN_LEN
    FORTRAN_LOGICAL           : FORTRAN_LOGICAL
    FORTRAN_KIND              : FORTRAN_KIND
    FORTRAN_MODULE_PROC       : FORTRAN_MODULE_PROC
    FORTRAN_MODULE            : FORTRAN_MODULE
    FORTRAN_NON_INTRINSIC     : FORTRAN_NON_INTRINSIC
    FORTRAN_NON_OVERRIDABLE   : FORTRAN_NON_OVERRIDABLE
    FORTRAN_NULL              : FORTRAN_NULL
    FORTRAN_NULLIFY           : FORTRAN_NULLIFY
    FORTRAN_NAMELIST          : FORTRAN_NAMELIST
    FORTRAN_NML               : FORTRAN_NML
    FORTRAN_NONE              : FORTRAN_NONE
    FORTRAN_NOPASS            : FORTRAN_NOPASS
    FORTRAN_ONLY              : FORTRAN_ONLY
    FORTRAN_OPEN              : FORTRAN_OPEN
    FORTRAN_OPTIONAL          : FORTRAN_OPTIONAL
    FORTRAN_PARAMETER         : FORTRAN_PARAMETER
    FORTRAN_PASS              : FORTRAN_PASS
    FORTRAN_PAUSE             : FORTRAN_PAUSE
    FORTRAN_POINTER           : FORTRAN_POINTER
    FORTRAN_PRINT             : FORTRAN_PRINT
    FORTRAN_PRIVATE           : FORTRAN_PRIVATE
    FORTRAN_PROCEDURE         : FORTRAN_PROCEDURE
    FORTRAN_PROGRAM           : FORTRAN_PROGRAM
    FORTRAN_PROTECTED         : FORTRAN_PROTECTED
    FORTRAN_READ              : FORTRAN_READ
    FORTRAN_REAL              : FORTRAN_REAL
    FORTRAN_RETURN            : FORTRAN_RETURN
    FORTRAN_REWIND            : FORTRAN_REWIND
    FORTRAN_ROUND             : FORTRAN_ROUND
    FORTRAN_SELECTCASE        : FORTRAN_SELECTCASE
    FORTRAN_SELECTTYPE        : FORTRAN_SELECTTYPE
    FORTRAN_SEQUENCE          : FORTRAN_SEQUENCE
    FORTRAN_SAVE              : FORTRAN_SAVE
    FORTRAN_SIGN              : FORTRAN_SIGN
    FORTRAN_SIZE              : FORTRAN_SIZE
    FORTRAN_SOURCE            : FORTRAN_SOURCE
    FORTRAN_STAT              : FORTRAN_STAT
    FORTRAN_STOP              : FORTRAN_STOP
    FORTRAN_SUBROUTINE        : FORTRAN_SUBROUTINE
    FORTRAN_TARGET            : FORTRAN_TARGET
    FORTRAN_THEN              : FORTRAN_THEN
    FORTRAN_DERIVED_DECL      : FORTRAN_DERIVED_DECL
    FORTRAN_TYPEIS            : FORTRAN_TYPEIS
    FORTRAN_UNFORMATTED       : FORTRAN_UNFORMATTED
    FORTRAN_UNIT              : FORTRAN_UNIT
    FORTRAN_USE               : FORTRAN_USE
    FORTRAN_VALUE             : FORTRAN_VALUE
    FORTRAN_VOLATILE          : FORTRAN_VOLATILE
    FORTRAN_WAIT              : FORTRAN_WAIT
    FORTRAN_WHERE             : FORTRAN_WHERE
    FORTRAN_WRITE             : FORTRAN_WRITE
    FORTRAN_END_PROGRAM       : FORTRAN_END_PROGRAM
    FORTRAN_END_FUNCTION      : FORTRAN_END_FUNCTION
    FORTRAN_END_SUBROUTINE    : FORTRAN_END_SUBROUTINE
    FORTRAN_END_MODULE        : FORTRAN_END_MODULE

    FORTRAN_END_BLOCK         : FORTRAN_END_BLOCK       // TODO: add to ROSE

    FORTRAN_DOUBLE_COMPLEX    : FORTRAN_DOUBLE_COMPLEX
    FORTRAN_TYPE              : FORTRAN_TYPE
    FORTRAN_UNKNOWN           : FORTRAN_UNKNOWN

    // SgToken:ROSE_Fortran_Operators
    //
    FORTRAN_INTRINSIC_PLUS    : FORTRAN_INTRINSIC_PLUS
    FORTRAN_INTRINSIC_MINUS   : FORTRAN_INTRINSIC_MINUS
    FORTRAN_INTRINSIC_POWER   : FORTRAN_INTRINSIC_POWER
    FORTRAN_INTRINSIC_CONCAT  : FORTRAN_INTRINSIC_CONCAT
    FORTRAN_INTRINSIC_TIMES   : FORTRAN_INTRINSIC_TIMES
    FORTRAN_INTRINSIC_DIVIDE  : FORTRAN_INTRINSIC_DIVIDE
    FORTRAN_INTRINSIC_AND     : FORTRAN_INTRINSIC_AND
    FORTRAN_INTRINSIC_OR      : FORTRAN_INTRINSIC_OR
    FORTRAN_INTRINSIC_EQV     : FORTRAN_INTRINSIC_EQV
    FORTRAN_INTRINSIC_NEQV    : FORTRAN_INTRINSIC_NEQV
    FORTRAN_INTRINSIC_EQ      : FORTRAN_INTRINSIC_EQ
    FORTRAN_INTRINSIC_NE      : FORTRAN_INTRINSIC_NE
    FORTRAN_INTRINSIC_GE      : FORTRAN_INTRINSIC_GE
    FORTRAN_INTRINSIC_LE      : FORTRAN_INTRINSIC_LE
    FORTRAN_INTRINSIC_LT      : FORTRAN_INTRINSIC_LT
    FORTRAN_INTRINSIC_GT      : FORTRAN_INTRINSIC_GT
    FORTRAN_INTRINSIC_NOT     : FORTRAN_INTRINSIC_NOT

strategies

  main =
    io-wrap(fast2sage)

  fast2sage =
      innermost(no-to-string)
    ; innermost(fast-to-sage)

rules

  sg-initialized-name: name -> SgUntypedInitializedName(SgUntypedType("unknown"),name)

//R201
fast-to-sage:  Program(units)
               -> SgUntypedFile(SgUntypedGlobalScope("",FORTRAN_UNKNOWN(),
                                                        SgUntypedDeclarationStatementList([]),
                                                        SgUntypedStatementList([]),
                                                        SgUntypedFunctionDeclarationList(units)))

//R404
fast-to-sage:  INTEGER()                     -> SgUntypedType("integer")
fast-to-sage:  REAL()                        -> SgUntypedType("real")
fast-to-sage:  DOUBLEPRECISION()             -> SgUntypedType("doubleprecision")
fast-to-sage:  LOGICAL()                     -> SgUntypedType("logical")

//R407
fast-to-sage:  IntVal(val)
               -> SgUntypedValueExpression(FORTRAN_UNKNOWN(),val,SgUntypedType("integer"))

//R413
fast-to-sage:  RealVal(val)
               -> SgUntypedValueExpression(FORTRAN_UNKNOWN(),val,SgUntypedType("real"))


//R501
fast-to-sage:  TypeDeclarationStmt(label,type,attrs,entities)
               -> SgUntypedVariableDeclaration(label,FORTRAN_UNKNOWN(),type,
                                               SgUntypedInitializedNameList(entities))

//R503
fast-to-sage:  Var(name,type,init)           -> SgUntypedInitializedName(type,name)

//R510
//  fast-to-sage:
//    DimSpec(no-lower-bound(), upper)       -> PpDimSpec(upper)
//  fast-to-sage:
//    DimSpec(lower, upper)                  -> PpDimSpec(lower, upper)

//R560 - TODO: implicit-spec-list
fast-to-sage:  ImplicitStmt(label,list)  -> SgUntypedImplicitDeclaration (label,FORTRAN_IMPLICIT())

//R562
//  fast-to-sage:  LetterSpec(s1,no-letter())   -> PpLetterSpec(s1)
//  fast-to-sage:  LetterSpec(s1,s2)            -> PpLetterSpec(s1,s2)

//R612
//  fast-to-sage:
//    PartRef(name,ss,is) -> PpPartRef(name,PpSectionSubscripts(ss),PpImageSelector(is))

//R631
//  fast-to-sage:  Allocation(part,[],[])                 -> PpAllocation(part)
//  fast-to-sage:  Allocation(part,shape,[])              -> PpAllocationShape(part,shape)
//  fast-to-sage:  Allocation(part,[],coshape)            -> PpAllocationCoshape(part,coshape)

//R633
//  fast-to-sage:  AllocateShapeSpec(no-lower-bound(),ub) -> PpAllocShapeSpec(ub)
//  fast-to-sage:  AllocateShapeSpec(lb,ub)               -> PpAllocShapeSpec(lb,ub)

//R637
//  fast-to-sage:  AllocateCoshapeSpec(no-lower-bound(),ub) -> PpAllocCoshapeSpec(ub)
//  fast-to-sage:  AllocateCoshapeSpec(lb,ub)               -> PpAllocCoshapeSpec(lb,ub)

fast-to-sage:  VarDef(name) -> SgUntypedReferenceExpression (FORTRAN_UNKNOWN(),name)
fast-to-sage:  VarRef(name) -> SgUntypedReferenceExpression (FORTRAN_UNKNOWN(),name)

// Unary Operators
//
fast-to-sage:
  UnaryPlus(expr)  -> SgUntypedUnaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_PLUS(),"+",expr)
fast-to-sage:
  UnaryMinus(expr) -> SgUntypedUnaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_MINUS(),"-",expr)
fast-to-sage:
  NOT(expr)        -> SgUntypedUnaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_NOT(),".NOT.",expr)

// Binary Operators
//
fast-to-sage:
  Power(e1,e2)  -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_POWER(),"**",e1,e2)

fast-to-sage:
  Mult(e1,e2)   -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_TIMES(), "*",e1,e2)
fast-to-sage:
  Div(e1,e2)    -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_DIVIDE(),"/",e1,e2)

fast-to-sage:
  Plus(e1,e2)   -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_PLUS(), "+",e1,e2)
fast-to-sage:
  Minus(e1,e2)  -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_MINUS(),"-",e1,e2)

fast-to-sage:
  Concat(e1,e2) -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_CONCAT(),"//",e1,e2)

fast-to-sage:
  EQ(e1,e2)     -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_EQ(),"==",e1,e2)
fast-to-sage:
  NE(e1,e2)     -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_NE(),"/=",e1,e2)
fast-to-sage:
  LT(e1,e2)     -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_LT(),"<",e1,e2)
fast-to-sage:
  LE(e1,e2)     -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_LE(),"<=",e1,e2)
fast-to-sage:
  GT(e1,e2)     -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_GT(),">",e1,e2)
fast-to-sage:
  GE(e1,e2)     -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_GE(),">=",e1,e2)

fast-to-sage:
  AND(e1,e2)    -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_AND(),".AND.",e1,e2)
fast-to-sage:
  OR(e1,e2)     -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_OR(), ".OR.", e1,e2)

fast-to-sage:
  EQV(e1,e2)    -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_EQV(), ".EQV.", e1,e2)
fast-to-sage:
  NEQV(e1,e2)   -> SgUntypedBinaryOperator(FORTRAN_UNKNOWN(),FORTRAN_INTRINSIC_NEQV(),".NEQV.",e1,e2)

fast-to-sage:
  Parens(expr)  -> expr

//R732
fast-to-sage:
  AssignmentStmt(label,var,expr)    -> SgUntypedAssignmentStatement(label,FORTRAN_UNKNOWN(),var,expr)

//R803
//  fast-to-sage:
//    AssociateStmt(label,name,list,eos) -> PpAssociateStmt(label,<append-colon>name,list,eos)

//R807
fast-to-sage =
{l1,l2,l3
  :  ?Block(label,name,Scope(l1,l2,l3),end)
  ;  !SgUntypedBlockStatement(label,
                              FORTRAN_BLOCK(),
                              name,
                              SgUntypedScope(label,FORTRAN_BLOCK(),
                                                   SgUntypedDeclarationStatementList(l1),
                                                   SgUntypedStatementList(l2),
                                                   SgUntypedFunctionDeclarationList(l3)),
                              end)
}

//R809
fast-to-sage:
  EndBlockStmt(label,name) -> SgUntypedNamedStatement(label,FORTRAN_END_BLOCK(),name)

//R817
//  fast-to-sage:
//    NonlabelDoStmt(label,name,loopcontrol,eos) -> PpNonlabelDoStmt(label,<append-colon>name,loopcontrol,eos)

//R838
//  fast-to-sage:
//    SelectCaseStmt(label,name,expr,eos)    -> PpSelectCaseStmt(label,<append-colon>name,expr,eos)

//R847
//  fast-to-sage:
//    SelectTypeStmt(label,name,name,selector,eos) -> PpSelectTypeStmt(label,<append-colon>name,name,selector,eos)

//R854
fast-to-sage:
  ContinueStmt(label)               -> SgUntypedOtherStatement(label,FORTRAN_CONTINUE())

//R860
//  fast-to-sage:
//    SyncImagesStmt(label,set,list,eos)     -> SyncImagesStmt(label,set,<pp-opt-list>(list))

//R1101
fast-to-sage =
{l1,l2,l3
  :  ?MainProgram(no-program-stmt(),Scope(l1,l2,l3),end)
  ;  !SgUntypedProgramHeaderDeclaration("",
                                        FORTRAN_PROGRAM(),
                                        "",
                                        SgUntypedInitializedNameList([]),
                                        SgUntypedType("void"),
                                        SgUntypedFunctionScope("",FORTRAN_PROGRAM(),
                                                               SgUntypedDeclarationStatementList(l1),
                                                               SgUntypedStatementList(l2),
                                                               SgUntypedFunctionDeclarationList(l3)),
                                        end)
 <+  ?MainProgram(ProgramStmt(label,name),Scope(l1,l2,l3),end)
  ;  !SgUntypedProgramHeaderDeclaration(label,
                                        FORTRAN_PROGRAM(),
                                        name,
                                        SgUntypedInitializedNameList([]),
                                        SgUntypedType("void"),
                                        SgUntypedFunctionScope(label,FORTRAN_PROGRAM(),
                                                               SgUntypedDeclarationStatementList(l1),
                                                               SgUntypedStatementList(l2),
                                                               SgUntypedFunctionDeclarationList(l3)),
                                        end)
}

//R1102
//  fast-to-sage: no-program-stmt()           -> ProgramStmt("", "")

//R1103
fast-to-sage:
  EndProgramStmt(label,name) -> SgUntypedNamedStatement(label,FORTRAN_END_PROGRAM(),name)

//R1104
fast-to-sage =
{l1,l2,l3
  :  ?Module(ModuleStmt(label,name),Scope(l1,l2,l3),end)
  ;  !SgUntypedModuleDeclaration(label,
                                 FORTRAN_MODULE(),
                                 name,
                                 SgUntypedModuleScope(label,FORTRAN_MODULE(),
                                                      SgUntypedDeclarationStatementList(l1),
                                                      SgUntypedStatementList(l2),
                                                      SgUntypedFunctionDeclarationList(l3)),
                                 end)
}

//R1104
fast-to-sage:  EndModuleStmt(label,name) -> SgUntypedNamedStatement(label,FORTRAN_END_MODULE(),name)

//R1116
//  fast-to-sage:  OfpSubmodule(name, scope)    -> PpSubmodule(scope)

//R1222
//  fast-to-sage:  ActualArgSpec(keyword, arg)  -> PpActualArgSpec(PpKeyword(keyword), arg)

//R1227 - TODO: need SgUntyedFunctionDeclaration constructor in SgUntyped.str
//fast-to-sage =
//{l1,l2,l3
//  :  ?Function(FunctionStmt(label,prefix,name,args,binding),Scope(l1,l2,l3),end)
//  ;  !SgUntypedFunctionDeclaration(label,
//                                     FORTRAN_FUNCTION(),
//                                     name,
//                                     <map(sg-initialized-name)>args,
//                                     SgUntypedType("void"),
//                                     SgUntypedFunctionScope(label,FORTRAN_FUNCTION(),
//                                                            SgUntypedDeclarationStatementList(l1),
//                                                            SgUntypedStatementList(l2),
//                                                            SgUntypedFunctionDeclarationList(l3)),
//                                     end)
//}

//R1233 - TODO: prefix, binding
fast-to-sage =
{l1,l2,l3
  :  ?Subroutine(SubroutineStmt(label,prefix,name,args,binding),Scope(l1,l2,l3),end)
  ;  !SgUntypedSubroutineDeclaration(label,
                                     FORTRAN_SUBROUTINE(),
                                     name,
                                     <map(sg-initialized-name)>args,
                                     SgUntypedType("void"),
                                     SgUntypedFunctionScope(label,FORTRAN_SUBROUTINE(),
                                                            SgUntypedDeclarationStatementList(l1),
                                                            SgUntypedStatementList(l2),
                                                            SgUntypedFunctionDeclarationList(l3)),
                                     end)
}

//R1236
fast-to-sage:
  EndSubroutineStmt(label,name) -> SgUntypedNamedStatement(label,FORTRAN_END_SUBROUTINE(),name)

//R1237
//  fast-to-sage:  OfpMpSubprogram(name, scope) -> PpMpSubprogram(scope)


  no-to-string: no-label()                   -> ""   // R312
  no-to-string: no-program-name()            -> ""
  no-to-string: no-subroutine-name()         -> ""

//  no-to-none: no-program-stmt()            -> None()   // R1102
//  no-to-none: no-kind-param()              -> None()   // R408
//  no-to-none: no-char-selector()           -> None()   // R420
//  no-to-none: no-char-length()             -> None()   // R503
//  no-to-none: no-init()                    -> None()   // R503
//  no-to-none: no-kind()                    -> None()   // R405
//  no-to-none: no-prefix()                  -> None()   // R1225
//  no-to-none: no-language-binding()        -> None()   // R1229
//  no-to-none: no-generic-spec()            -> None()   // R1204
//  no-to-none: no-module-name()             -> None()   // R1106
//  no-to-none: no-module-nature()           -> None()   // R1109
//  no-to-none: no-block-data-name()         -> None()   // R1122
//  no-to-none: no-proc-interface()          -> None()   // R1212
//  no-to-none: no-subroutine-name()         -> None()   // R1236
//  no-to-none: no-binding-name()            -> None()   // R508
//  no-to-none: no-expr()                    -> None()   // R1241
//  no-to-none: no-stop-code()               -> None()   // R857
//  no-to-none: no-r()                       -> None()   // R1004
//  no-to-none: no-m()                       -> None()   // R1007
//  no-to-none: no-e()                       -> None()   // R1007
//  no-to-none: no-name()                    -> None()   // R839, R850
//  no-to-none: no-parent-submodule-name()   -> None()   // R1118
//  no-to-none: no-high()                    -> None()   // R844
//  no-to-none: no-low()                     -> None()   // R844
//  no-to-none: no-stride()                  -> None()   // R920
//  no-to-none: no-type-spec()               -> None()   // R626
//  no-to-none: no-lower-bound()             -> None()   // R633
//  no-to-none: no-component-name()          -> None()   // R734
//  no-to-none: no-upper-bounds()            -> None()   // R736
//  no-to-none: no-type-bound-procedure-part()  -> None()   //R445
//  no-to-none: no-binding-private-stmt()    -> None()   // R446
//  no-to-none: no-arg-name()                -> None()   // R451
//  no-to-none: no-subprogram-part()         -> None()   // R210
//  no-to-none: no-repeat()                  -> None()   // R541
//  no-to-none: no-forall-step()             -> None()   // R753
//  no-to-none: no-mask-expr()               -> None()   // R752
//  no-to-none: no-else-stmt()               -> None()   // R832
//  no-to-none: no-loop-control()            -> None()   // R818
//  no-to-none: no-subscript()               -> None()   // R619

//  no-to-none: PpKeyword(no-keyword())      -> None()   // R215

//  no-to-none: PpArraySpec([])              -> None()   // R515
//  no-to-none: PpCoarraySpec([])            -> None()   // R509

//  no-to-none: PpSectionSubscripts(no-section-subscripts()) -> None()
//  no-to-none: PpImageSelector(no-image-selector())         -> None()