Building aterm library:
setenv CFLAGS "-m32 -fPIC"
setenv LDFLAGS "-m32"
configure --prefix=/home/dquinlan/bin/aterm-2.5-install-32bit
make
make check
make install

Building the sdf tools:
configure --with-aterm=/home/dquinlan/bin/aterm-2.5-install-32bit --prefix=/home/dquinlan/bin/sdf2-bundle-2.4-install-32bit
make install
make check

configure --with-aterm=/home/dquinlan/bin/aterm-2.5-install-32bit --with-sdf=/home/dquinlan/bin/sdf2-bundle-2.4-install-32bit --prefix=/home/dquinlan/bin/strategoxt-0.17-install-32bit
make install
make check





March 5, 2014:
   Updated fortran support using newest work from OFP git repository.
A clone of this repository is at: 
     /home/dquinlan/ROSE/FORTRAN_LLNL/OFP-SDF/ofp-sdf

cd to ofp-sdf/fortran/rose_traverse

Modified Makefile in ofp-sdf/fortran/rose_traverse/Makefile
   1) removed -ferror-limit=5
   2) reset ATERM_ROOT:
         ATERM_ROOT = /home/dquinlan/bin/aterm-2.5-install-64bit
   3) reset ARCH:
         ARCH =

(added aterm install directory to my LD_LIBRARY_PATH: done in .cshrc.linux)

Ran "make"

cp ofp-sdf/fortran/syntax/* to src/3rdPartyLibraries/experimental-fortran-parser/syntax-v0.14


September 9th, 2014:
   1) Makefile.am will have a target to copy files out of the OFP repository and into ROSE.

   2) Need to have the stratego_transformations/Makefile.am put generated files into the build tree.


January 18, 2016:
   1) We want to copy additional files from the OFP distribution to the source tree. DONE
   2) Get new work compiling and linking. DONE
   3) Build copy_source Makefile rule to cp required files from updates to the OFP git repository. DONE
   4) Get Craig's OFP round-trip testing into place. (see approved files to diff against at: /home/dquinlan/ROSE/OpenFortranParser/GITHUB/ofp-sdf/tests/rule-tests/pp).
   5) Add collection of test codes to be tested (eventually all of the ROSE fortran regression tests).
   6) Markus will prepare the new grammar with the new IR node build functions (especially the Untyped IR nodes which we can test immediately).
   7) Dan will fix the base classes defined in ROSETTA that are marked to not be used as IR nodes: UntypedExpression, UntypedFunctionDeclaration, and UntypedDeclarationStatement. DONE
   8) Remove unused files from the git repository.
        remove dirs: rose_traverse, syntax-v0.14
        remove files: ASTBuilder.hpp, OFPExpr.cpp, OFPExpr.hpp, OFPNodes.cpp, OFPNodes.hpp, ofp_traverse_productions.cpp, OFPUnparser.cpp, OFPUnparser.hpp,traversal.cpp, traversal.hpp, traverse.cpp, traverse.hpp
        remove files: ofp-simplify.c

   9) Commit only required files. DONE

Files (with descriptions) added to support experimental fortran work:
   sdf_syntax/FAST.str                           # stratego definition of FAST (Fortran AST)
   stratego_transformations/fast2pp.str          # transformations from FAST in preparation for pretty printing (used for round trip testing)
   stratego_transformations/no-to-none.str       # transformation pass used in transformations to FAST
   stratego_transformations/ofp2fast.str         # transformations from output of stratego parser to FAST
   aterm_traversal/SgUntyped.str                 # grammar file representing SgUntyped nodes (eventually LLNL's responsibility), pruned from Markus' grammar generation
   aterm_traversal/build_SgUntypedNodes.cpp      # build function prototypes (eventually LLNL's responsibility)
   aterm_traversal/build_SgUntypedNodes.hpp      # header file for build function prototypes (eventually LLNL's responsibility)
   aterm_traversal/fast2sage.str                 # transformations for converting FAST to SAGE untyped nodes (in SgUntyped.str)
   aterm_traversal/traverse_SgUntypedNodes.cpp   # C++ traversal implementation to read ATerms representing SgUntyped nodes (calls build functions in build_SgUntypedNodes.cpp)
   aterm_traversal/traverse_SgUntypedNodes.hpp   # header file for C++ traversal implementation to read ATerms representing SgUntyped nodes (calls build functions in build_SgUntypedNodes.cpp)
