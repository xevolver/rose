// **********************************************************************
// This code is generated once for each library.  This code implements
// the traversal of the application's AST which will recognize and 
// annotate the AST with attributes.
// Details:
//     These traversal functions call the appropriate recognition
//     functions divided into several groups (which might be a bad 
//     strategy ???
// **********************************************************************

class $DEFINED_LIBRARY_NAME_RecognitionTraversal : public SimpleProcessing
   {
     public:
          void visit (SgNode* astNode);
   };

void $DEFINED_LIBRARY_NAME_RecognitionTraversal::visit (SgNode* astNode)
   {
     ROSE_ASSERT (astNode != NULL);
     bool qualifyingFunctionCallExpression = false;

  // Make the assumption that all expressions are located in the same file as the statement!
     SgStatement* statement = TransformationSupport::getStatement(astNode);

     if (statement != NULL)
        {
          if (astNode->variantT()) == V_SgFuncCallExp)
             {
               string fileName = rose::getFileName(statement);
               printf ("Parent statement in file = %s at line = %d \n",fileName.c_str(),rose::getLineNumber(statement));

            // If the statement is in a file within the subdirectory structure of the library's
            // directiry structure then it is considered to be a library abstraction
               if ( isContainedIn(fileName,targetDirectory) == true )
                  {
                    qualifyingFunctionCallExpression = true;
                  }
             }
        }

     if (qualifyingFunctionCallExpression == true)
        {
          $DEFINED_LIBRARY_NAME_Enum abstractionClassification = 
               recognizeAbstractionFrom$DEFINED_LIBRARY_NAME (SgNode* astNode)

          AbstractionAttribute* abstractionAttribute = NULL;

       // all the different possibilities
          switch(abstractionClassification)
             {
            // special overloaded operators and general functions
               case TransformationSupport::FUNCTION_CALL_OPERATOR_CODE:
                    abstractionAttribute = new GeneralOperatorAttribute(args);
                    break;

            // indexing operators
               case TransformationSupport::PARENTHESIS_OPERATOR_CODE:
               case TransformationSupport::BRACKET_OPERATOR_CODE:
                    abstractionAttribute = new GeneralOperatorAttribute(args);
                    break;

            // unary operators
               case TransformationSupport::NOT_OPERATOR_CODE:
               case TransformationSupport::DEREFERENCE_OPERATOR_CODE:
               case TransformationSupport::ADDRESS_OPERATOR_CODE:
               case TransformationSupport::LSHIFT_OPERATOR_CODE:
               case TransformationSupport::RSHIFT_OPERATOR_CODE:
               case TransformationSupport::LSHIFT_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::RSHIFT_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::PREFIX_PLUSPLUS_OPERATOR_CODE:
               case TransformationSupport::POSTFIX_PLUSPLUS_OPERATOR_CODE:
               case TransformationSupport::PREFIX_MINUSMINUS_OPERATOR_CODE:
               case TransformationSupport::POSTFIX_MINUSMINUS_OPERATOR_CODE:
                    abstractionAttribute = new GeneralOperatorAttribute(args);
                    break;

            // binary operators
               case TransformationSupport::ASSIGN_OPERATOR_CODE:
               case TransformationSupport::ADD_OPERATOR_CODE:
               case TransformationSupport::SUBT_OPERATOR_CODE:
               case TransformationSupport::MULT_OPERATOR_CODE:
               case TransformationSupport::DIV_OPERATOR_CODE:
               case TransformationSupport::INTEGER_DIV_OPERATOR_CODE:
               case TransformationSupport::MOD_OPERATOR_CODE:
               case TransformationSupport::AND_OPERATOR_CODE:
               case TransformationSupport::OR_OPERATOR_CODE:
               case TransformationSupport::BITXOR_OPERATOR_CODE:
               case TransformationSupport::BITAND_OPERATOR_CODE:
               case TransformationSupport::BITOR_OPERATOR_CODE:
               case TransformationSupport::EQ_OPERATOR_CODE:
               case TransformationSupport::LT_OPERATOR_CODE:
               case TransformationSupport::GT_OPERATOR_CODE:
               case TransformationSupport::NE_OPERATOR_CODE:
               case TransformationSupport::LE_OPERATOR_CODE:
               case TransformationSupport::GE_OPERATOR_CODE:
               case TransformationSupport::PLUS_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::MINUS_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::AND_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::IOR_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::MULT_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::DIV_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::MOD_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::XOR_ASSIGN_OPERATOR_CODE:
                    abstractionAttribute = new BinaryOperatorAttribute(args[0],arg[1]);
                    break;

               default:
                    printf ("Error, default reached in $DEFINED_LIBRARY_NAME_RecognitionTraversal::visit() \n");
                    ROSE_ABORT();
             }

       // Example of how to build an AST attribute
          astNode->attribute.set("$DEFINED_LIBRARY_NAME_Abstraction",abstractionAttribute);
        }
   }


