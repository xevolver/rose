This project within ROSE is focused on the automated generation of support for library
abstractions. Their automated recognition within a user's application is the goal.

The approach is:

0) Techniques for defining restriction operators on the AST
      a) Collapse all overloaded functions (syntatic)
      b) structurally group all language elements of a similar type
           1. group all declarations (structural)
           2. group all non declarations
      c) cluster AST nodes based on relations (metrics)
           1. use scopes as a relation
               a. global scope
               b. file scope
               c. local scope
               d. scope weighting (not all scopes at the same distance 
                  from global scope are of the same importance) how do 
                  we weight scopes.
                    * relative performance
                    * relative complexity
                    * use of specific data structures (types or variables)

           2. use call graph to define relation (metric)
           3. use file name as relation
           4. use directory name as relation
           5. use performance feedback as a relation
      d) Program Analysis
           1. Is the development of a hierarchy (multi-level) just a 
              preprocessing of the AST?
           2. How do we represent data required for program analysis
               a. separate data between that internal to a node (on a level) 
                  and having external connections.
                    * e.g. accesses of global variables would alway form an edge 
                      between clusters
               b. ???
           3. How do we use the data
               a. High performance from analysis by only using relavant 
                  parts of the AST. AMR meets program analysis!
           4. Ultimately what we can learn about a program is directly related 
              to resorces.
               a. Time
               b. Space
               c. Feedback directed compilation
               d. Adaptive program analysis permits a wiser use of all three 
                  (time, space, and runtime feedback).

      e) Feedback in debugging???
           1. What if all debugging output was organized given the representation 
              in the multilevel AST (instead of being flattened into a single 
              file (or cout)).


1) Read an application using the library (so that we can see the libraries definition of
   high-level abstractions).
     a) We can build some support based on only seeing the declarations (building the
        recognition mechanism)
           1. Generate code to recognize library abstractions
                 a. functions with specific names (defined in the library's header files)
                 b. types defined in the library's header files
                 c. member functions with specific names (defined in the library's header files)

           2. Name of library must be provided as input
                 a. must contain only characters that can form valid C++ type names
                    (e.g. no +,-,^,&,*,$,#,@,!,(,),[,],{,},:,",`,',<,>,.,?,/,~,|,\, etc.)
                 b. define to be DEFINED_LIBRARY_NAME for purposes of documentation

           3. Enums to be generated
                 a. enum type name (based on DEFINED_LIBRARY_NAME) library name "_Enum"
                    suffix (e.g. DEFINED_LIBRARY_NAME_Enum)

           4. Code to be generated: 

                 a. Code to be generated for each library

DEFINED_LIBRARY_NAME_Enum
recognizeAbstractionFromDEFINED_LIBRARY_NAME (SgNode* astNode)
   {
  // Adapt example code from A++P++ translator
     DEFINED_LIBRARY_NAME_Enum
     switch (astNode->variantT())
        {
          case xxx:
          default:
        }
   }

class AbstractionAttribute : public AstAttribute
   {
     public:
          MyAstAttribute(string s):parentListString(s) {}

       // Function to permit output in the generated PDF files
          string toString () { return parentListString; }

     private:
          string parentListString;
   };

// Put library's overloaded unary operators here
class UnaryOperatorAttribute : public AbstractionAttribute
   {
     public:
          SgFunctionCallExp* unaryOp;
          SgExpression* operand;

       // constructor
          UnaryOperatorAttribute(SgFunctionCallExp* exp):unaryOp(exp) {}
   };

// Put library's overloaded binary operators here
class BinaryOperatorAttribute : public AbstractionAttribute
   {
     public:
          SgFunctionCallExp* binaryOp;
          SgExpression* lhs_operand;
          SgExpression* rhs_operand;

       // constructor
          BinaryOperatorAttribute(SgFunctionCallExp* exp):binaryOp(exp) {}
   };


// Put library's functions here
class GeneralOperatorAttribute : public AbstractionAttribute
   {
     public:
          SgFunctionCallExp* functionCall;
          SgExprListExp* argments;

       // constructor
          GeneralOperatorAttribute(SgFunctionCallExp* exp):functionCall(exp) {}
   };


                 b. Code to be generated for each function or member function in the
                    library.

           5. A separate recognition pass in also generated:

BinaryOperatorAttribute*
is$DEFINED_LIBRARY_NAME_BinaryOperatorAbstraction ( SgNode* astNode )
   {
     BinaryOperatorAttribute* binaryOperator = astNode->attribute.get("DEFINED_LIBRARY_NAME_Abstraction");
     return binaryOperator;
   }

class $DEFINED_LIBRARY_NAME_RecognitionTraversal : public SimpleProcessing
   {
     public:
          void visit (SgNode* astNode);
   };

void $DEFINED_LIBRARY_NAME_RecognitionTraversal::visit (SgNode* astNode)
   {
     ROSE_ASSERT (astNode != NULL);
     bool qualifyingFunctionCallExpression = false;

  // Make the assumption that all expressions are located in the same file as the statement!
     SgStatement* statement = TransformationSupport::getStatement(astNode);

     if (statement != NULL)
        {
          if (astNode->variantT()) == V_SgFuncCallExp)
             {
               string fileName = rose::getFileName(statement);
               printf ("Parent statement in file = %s at line = %d \n",fileName.c_str(),rose::getLineNumber(statement));

            // If the statement is in a file within the subdirectory structure of the library's
            // directiry structure then it is considered to be a library abstraction
               if ( isContainedIn(fileName,targetDirectory) == true )
                  {
                    qualifyingFunctionCallExpression = true;
                  }
             }
        }

     if (qualifyingFunctionCallExpression == true)
        {
          DEFINED_LIBRARY_NAME_Enum abstractionClassification = 
               recognizeAbstractionFromDEFINED_LIBRARY_NAME (SgNode* astNode)

          AbstractionAttribute* abstractionAttribute = NULL;

       // all the different possibilities
          switch(abstractionClassification)
             {
            // special overloaded operators and general functions
               case TransformationSupport::FUNCTION_CALL_OPERATOR_CODE:
                    abstractionAttribute = new GeneralOperatorAttribute(args);
                    break;

            // indexing operators
               case TransformationSupport::PARENTHESIS_OPERATOR_CODE:
               case TransformationSupport::BRACKET_OPERATOR_CODE:
                    abstractionAttribute = new GeneralOperatorAttribute(args);
                    break;

            // unary operators
               case TransformationSupport::NOT_OPERATOR_CODE:
               case TransformationSupport::DEREFERENCE_OPERATOR_CODE:
               case TransformationSupport::ADDRESS_OPERATOR_CODE:
               case TransformationSupport::LSHIFT_OPERATOR_CODE:
               case TransformationSupport::RSHIFT_OPERATOR_CODE:
               case TransformationSupport::LSHIFT_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::RSHIFT_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::PREFIX_PLUSPLUS_OPERATOR_CODE:
               case TransformationSupport::POSTFIX_PLUSPLUS_OPERATOR_CODE:
               case TransformationSupport::PREFIX_MINUSMINUS_OPERATOR_CODE:
               case TransformationSupport::POSTFIX_MINUSMINUS_OPERATOR_CODE:
                    abstractionAttribute = new GeneralOperatorAttribute(args);
                    break;

            // binary operators
               case TransformationSupport::ASSIGN_OPERATOR_CODE:
               case TransformationSupport::ADD_OPERATOR_CODE:
               case TransformationSupport::SUBT_OPERATOR_CODE:
               case TransformationSupport::MULT_OPERATOR_CODE:
               case TransformationSupport::DIV_OPERATOR_CODE:
               case TransformationSupport::INTEGER_DIV_OPERATOR_CODE:
               case TransformationSupport::MOD_OPERATOR_CODE:
               case TransformationSupport::AND_OPERATOR_CODE:
               case TransformationSupport::OR_OPERATOR_CODE:
               case TransformationSupport::BITXOR_OPERATOR_CODE:
               case TransformationSupport::BITAND_OPERATOR_CODE:
               case TransformationSupport::BITOR_OPERATOR_CODE:
               case TransformationSupport::EQ_OPERATOR_CODE:
               case TransformationSupport::LT_OPERATOR_CODE:
               case TransformationSupport::GT_OPERATOR_CODE:
               case TransformationSupport::NE_OPERATOR_CODE:
               case TransformationSupport::LE_OPERATOR_CODE:
               case TransformationSupport::GE_OPERATOR_CODE:
               case TransformationSupport::PLUS_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::MINUS_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::AND_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::IOR_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::MULT_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::DIV_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::MOD_ASSIGN_OPERATOR_CODE:
               case TransformationSupport::XOR_ASSIGN_OPERATOR_CODE:
                    abstractionAttribute = new BinaryOperatorAttribute(args[0],arg[1]);
                    break;

               default:
                    printf ("Error, default reached in DEFINED_LIBRARY_NAME_RecognitionTraversal::visit() \n");
                    ROSE_ABORT();
             }

       // Example of how to build an AST attribute
          astNode->attribute.set("DEFINED_LIBRARY_NAME_Abstraction",abstractionAttribute);
        }
   }

     b) More support for library abstractions can be built if the whole library is 
        compiled with a library analysis tool (more sophisticated tool that what we will
        first build).   More sophisticated analysis would include:
           1. Side-effect analysis on library function definitions (clearly requires
              definitions not just declarations).
           2. 


2) Use of the high-level abstraction recognition mechamism

    The use is similar to that of the enum list and variables associated with the C++
    grammar, just done on a larger scale which include the C++ language elements AND the
    abstractions defined in the library.

class MyTraversal : public SimpleProcessing
   {
     public:
          void visit (SgNode* astNode);
   };

void MyTraversal::visit (SgNode* astNode)
   {
     ROSE_ASSERT (astNode != NULL);

     switch (astNode->variantT(DEFINED_LIBRARY_NAME_Enum) )
        {
       // Common C++ language construct enum
          case V_SgExpressionStatement:
               SgExpressionStatement* expressionStatement = isSgExpressionStatement(astNode);
               break;

       // Specialized enum value that is specific to the binary operator+()
       // for a doubleArray type within an array library.
          case V_doubleArrayBinaryOperatorPlus:
            // BinaryOperatorAttribute* binaryOperator = astNode->attribute.get("DEFINED_LIBRARY_NAME_Abstraction");
               BinaryOperatorAttribute* binaryOperator = isDEFINED_LIBRARY_NAME_Abstraction(astNode);
               break;

       // Everything else
          default:
               printf ("Error, default reached in DEFINED_LIBRARY_NAME_RecognitionTraversal::visit() \n");
               ROSE_ABORT();
        }
   }
