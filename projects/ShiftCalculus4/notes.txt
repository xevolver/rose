
// Constructor used
  Stencil<TCoef>(vector<TCoef > a_vecT, vector<Point > a_vecPt,
                 Point a_destRefratio=getOnes(),
                 Point a_destShift=getZeros(),
                 Point a_srcRefratio=getOnes());

// Specification of stencil:
  // declaration of vectors used
     vector<Point>shft;
     vector<double>wt;

  // specification of constants
     double ident =  1.0;
     double C0    = -4.0;

     Point zero = getZeros();

  // Why are these pushed into the vector first
     shft.push_back(zero);
     wt.push_back(C0);

// before loop: shft vector: {0.0  0.0  0.0}
// before loop: wt vector:   -4.0

     for (int dir = 0; dir < DIM; dir++)
        {
       // This builds a unit vector
          Point thishft = getUnitv(dir);

          shft.push_back(thishft);
          wt.push_back(ident);
          shft.push_back(thishft*(-1));
          wt.push_back(ident);

// dir == 0: shft vector: {{0.0  0.0  0.0}, {1.0  0.0  0.0}, {0.0 -1.0  0.0}}
// dir == 0: wt vector:   -4.0  1.0  1.0

// dir == 1: shft vector: {{0.0  0.0  0.0}, {1.0  0.0  0.0}, {0.0 -1.0  0.0}, {0.0  1.0  0.0}, {0.0  -1.0  0.0}}
// dir == 1: wt vector:   -4.0  1.0  1.0  1.0  1.0

// dir == 2: shft vector: {{0.0  0.0  0.0}, {1.0  0.0  0.0}, {0.0 -1.0  0.0}, {0.0  1.0  0.0}, {0.0  -1.0  0.0}, {0.0  0.0  1.0}, {0.0  0.0 -1.0}}
// dir == 2: wt vector:   -4.0  1.0  1.0  1.0  1.0  1.0  1.0
       }

// I expect that this should be interpreted to be the stencil (for 2D, and I will pass on writing the 3D example).:
//   0.0    1.0   0.0
//   1.0   -4.0   1.0
//   0.0    1.0   0.0

// It is not clear to me how to statically interpret the data in "shft" vector and "wt" vector
// to be the associated stencil.  Please keep in mind that the interpretation will have to
// be done at compile time using static analysis.


// Build the stencil
  Stencil<double> laplace(wt,shft);

// Build the stencil operator:
  StencilOperator<double,double, double> op;

// Apply the stencil:
  op(laplace,Adest,Asrc,bxdest);


// An interesting alternative might be to actually use your data structures in the compiler
// and translate the input code to run the equivalent operations, this is a bit more elaborate
// than I expected to require so I would like to avoid something that complex.  I am not clear
// if this is possible to do as well, so I don't want that approach.


After discussion with Anshu:
   Point:
      A Point is used as an integer vector (what I think in Chombo is called an IntVec).
      A better name might be ReletiveOffset, since it does not define a point in space 
         but is being used as a relative offset.
   Shift:
      A Shift has a point as a data member, but it is used only as an integer vector (a little confusuing).
      A Shift is a relative offset and a weight (the offset is relative to whereever the stencil is applied
         when the shift is used within a stencil.
   Stencil:
      A stencil is a collection of shifts (and for centered difference stencil would for example include 
         a shift with a vector of zeros as offests, meaing zero offest).

      Stencils have two defined operators:
         Operator + (e.g. S1 + S2):
            This is a union of the collection of shifts for each stencil.
         Operator * (e.g. S1 * S2):
            This is the convolution, which is the weight in every shift in S1, multiplied by the the weight of the shift in S2.
            This the number of shifts in S1*S2 is the product on the number of shifts in S1 and S2.

 
   

  // This is a simpler interface to interpret (suggested by Anshu).
     Stencil<double> laplace(pair<Shift,double>(zero,C0));

  // DQ: these are used as relative offsets instead of points, so then might be more clear if 
  // there was a RelativeOffset class.
     Point xdir = getUnitv(0);

  // here I am using "+" operator defined on stencils, which is one mechanism for composing
     laplace=laplace+(pair<Shift,double>(xdir,ident));

  // DQ: this might be simpler if we have an operator*=() member function.
     xdir=xdir*(-1);
     laplace=laplace+(pair<Shift,double>(xdir,ident));
     Point ydir=getUnitv(1);
     laplace=laplace+(pair<Shift,double>(ydir,ident));
     ydir=ydir*(-1);
     laplace=laplace+(pair<Shift,double>(ydir,ident));
#if DIM==3
     Point zdir=getUnitv(1);
     laplace=laplace+(pair<Shift,double>(zdir,ident));
     zdir=zdir*(-1);
     laplace=laplace+(pair<Shift,double>(zdir,ident));
#endif

It might be easier to translate each of these to a simple language
and then process the language to build the stencil.  More precisely
I think this is a push down automoaton (state-machine).  We can define 
the states using ROSE IR nodes that are expressed over a sequence 
of operations.  But we need th concert of variable reference expression
so that we can support updates to variables.



Looking as each statement:
   Stencil<double> laplace(pair<Shift,double>(zero,C0));
would become a SgVariableDeclaration marked with an attribute as a StencilDeclaration.
The input would be a SgExpression (likely a SgMemberFunctionDeclaration to the pair class)
marked as a ShiftWeight expression.

   getUnitv(0);
would be the unit vector for dimention == 1.

   xdir = xdir * (-1);
would be rewritten to be the reverse sign of xdir (and would be simpler if expressed 
using an operator*=() member function).

   xdir could be replaced with getUnitv(0), the subsition being well defined.

   laplace = laplace + (pair<Shift,double>(xdir,ident));
would be defined to add a new ShiftWeight expression to the stencil.

We could reuse ROSE IR nodes marked with attributes.
Aterms generated could be generated using different names and thus appear 
as different IR nodes.  Aterms read to generate the ROSE AST would
then generate the usual ROSE IR ndes but then marked with attributes
as they were originally.  A special ROSE AST attribute will have to
be constructed to support this new design/feature.




I think it will be helpful to view the Stencil, Shift, and Point as
finite statem machines and with events represented by there
member functions (perhaps also tied to member function input of specific values).

The for Point, the events are:
   Lables of each Point are defined by the names used for the variables of type "Point".
   Construction: constructor call with initialization to zero (e.g. initialized using the getZeros() function).
   Negation: operator*=(-1) member function call with -1 as parameter.

The Shift has events:
   Lables for each Shift defined by names (if asociated with variables).
   Constructor call (from input of a variable of type "Point").

The Stencil has events:
   Labels for each stencil defined by names (if asociated with variables).
   Construction: constructor calls (with initialization from pairs of shifts and stencil coeficients or 
      variables of type vector of "Point" and vector of stencil coeficients).
   Union operator (operator+=()) to add more stencils (with offsets) to the stencil.
   Convolution to apply stenciles to stencils.

Internally we represent the evolving state of the finite state machine given the events for each.
The final state of the stencil state machine is then use to statically define the intermediate
form of the data which we can use to build code from (ROSE ASTs).

Loops must be interpreted as application of the events in the loop body DIM times
where DIM is the dimension of the stencil (and knows at compile time).


Note about StinclOperator:
    This appears to be a bit of a useless class, it is templated on
a collection of template parameters that are used to specify the 
types used in the function parameters for the operator() member function.
As simpler design might be for this to just be a simple template function
instead of a templated class with a operator().
