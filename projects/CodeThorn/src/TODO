10) move
  #define NO_STATE -3
  #define NO_ESTATE -4
  from file Labeler.h to CodeThorn.h header file (to be created).

12) introduce AnalysisBaseMechanisms data structure to contain
  - Labeler*
  - VariableIdMapping*
  - PointerAnalysisInterface*
  - etc.
  to REPLACE ProgramAnalysis::initializeTransferFunctions()
  INSTEAD ref to AnalysisBaseMechanisms is passed around

13) refactor rdmain, integrate into analyterix
14) remove rdmain (is already deactivated)
15) integrate matcher_demo into CodeThorn; remove matcher_demo
17) establish Normalizer (DFAnalysisBase contains now a normalizeProgram method. But a Normalization class is still missing)
i) define normalization/denormalization pairs (denormalizer adapts analysis results)
ii) every normalization establishes a subset of the language (provide language-restrictor/checker for this subset)
iii) normalize function calls
iv) normalize expressions (introduce temporaries, such that one op on rhs)
18) use predicates for normalized program to extract program information
    - the results should allow to implement analyses without side-passing this interface (=abstraction-layer)
    - e.g.  while([lab1:]E) [lab2:]S; => [Lab1:] L1: T1 t1=E1;..; bool tn=tn; if(tn) [lab2:]S; goto L1;
    - e.g. f(g(x)) => t1=g(x);f(t1);
    - SPRAY::isLowLevelAst(SgNode*)
19) for all Ids generate a CSV file with the mapped information
   e.g.: VariableId: id,original-name(as in source), SPRAY::unique-name, line of declaration, column of declaration, scopeId, scope-nesting
20 Implement Ids (in addition to VariableId)
i) Implement ScopeId: Scopes have the same structure as types. A nested scope is like a inheriting type. Thus, we have isNestedScopeOf(s1,s2)
ii) Implement ExpressionId
iii) Implement FunctionId
iv) Implement TypeId (+ isSubTypeOf(t1,t2))

21) establish Id-based query-interface. Analyses only use Ids in their analysis information.
    e.g.: - isInScope(VariableId, ScopeId);
          - ScopeId getScopeOfVariable(varId);
          - isShadowedBy(variableId, variableId);
22) establish analyses
i) RDAnalysis
ii) LVAnalysis
iii) IntervalAnalysis
iv) PointerAnalysis
23)
v) AEAnalysis (requires ExpressionId)
vi) VBEAnalysis (requires ExpressionId)
24) constant array support:
i) Analyzer::analyzerVariableDeclaration : do not initialize PState for constant arrays: done, but only in RERS mode (adapt to be come general feature).
ii) VariableIdMapping: implement isConstantArray
25) ConstIntLattice: 
  i) rename to IntegerLattice
  ii) rename (and rewrite all user code) to not overload && and || anymore.
  iii) remove indirection of number-types in CodeThorn (only possible after removal of && and ||)

27) Lattice<=PropertyState(+transfer)
    Only Solver needs to know the transfer functions
