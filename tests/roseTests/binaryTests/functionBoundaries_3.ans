Functions detected from binary executable:
  Num Entry-Addr Begin-Addr  End-Addr  Insns/ Bytes     Reason(*1)    CallConv  Returns  Stack(*2)               Name              
 ---- ---------- ---------- ---------- ------------ ----------------- -------- --------- --------- --------------------------------
    0 0x080482c8 0x080482c8 0x080482df     8/23     .C....P..........  unknown       yes                                           
    1 0x080482f0 0x080482f0 0x080482f6     1/6      .C.I.............  unknown    always           signal@plt                      
    2 0x08048300 0x08048300 0x08048306     1/6      .C.I.............  unknown    always           puts@plt                        
    3 0x08048310 0x08048310 0x08048316     1/6      .C.I.............  unknown    always           __libc_start_main@plt           
    4 0x08048320 0x08048320 0x08048326     1/6      .C.I.............  unknown        no           _exit@plt                       
    5 0x08048330 0x08048330 0x08048336     1/6      .C.I.............  unknown    always           __gmon_start__@plt              
    6 0x08048340 0x08048340 0x08048362    14/34     E................  unknown        no                                           
    7 0x08048364 0x08048364 0x08048388    15/36     .C....P..........  unknown       yes                                           
    8 0x08048390 0x08048390 0x080483ce    20/62     .C....P..........  unknown       yes                                           
    9 0x080483d0 0x080483d0 0x08048440    30/100    .C....P..........  unknown       yes                                           
   10 0x08048440 0x08048440 0x08048456     8/22     ......P..........  unknown       yes                                           
   11 0x08048460 0x08048460 0x0804847e     7/30     ......P..........  unknown        no                                           
   12 0x08048480 0x08048480 0x080484a4     8/36     ......P..........  unknown        no                                           
   13 0x080484b0 0x080484b0 0x080484e8    22/56     ......P..........  unknown       yes                                           
   14 0x08048520 0x08048520 0x08048578    33/88     ......P..........  unknown       yes                                           
   15 0x08048580 0x08048580 0x080485b0    19/48     .C....P..........  unknown       yes                                           
   16 0x080485b0 0x080485b0 0x080485ca    12/26     .C....P..........  unknown       yes                                           
 ---- ---------- ---------- ---------- ------------ ----------------- -------- --------- --------- --------------------------------
  == Footnotes ==
  Footnote *1: E = entry address         H = CFG head             C = function call(*)
               X = exception frame       T = thunk                I = imported/dyn-linked
               O = exported              S = function symbol      P = instruction pattern
               G = CFG graph analysis    U = user-def detection   N = NOP/zero padding
               D = discontiguous blocks  V = intra-function block L = leftover blocks
               Mxxx are miscellaneous reasons (at most one misc reason per function):
                     M001 = code between function padding bytes
               Note: "c" means this is the target of a call-like instruction or instruction
                     sequence but the call is not present in the global control flow graph, while
                     "C" means the call is in the CFG.
  Footnote *2: This is the concrete change in the stack pointer from when the function is entered to
               when it returns.  The initial pointer is assumed to be zero, thus not counting the
               return address or function arguments pushed onto the stack by the caller.  The final
               stack pointer is obtained immediately after the return and is adjusted for popping the
               return address from the stack for architectures that use that method of returning, and
               counting any function arguments popped by the callee (common on Microsoft Windows).
