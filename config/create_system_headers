#!/bin/bash
##!/bin/bash -vx
######################################################################################
# Author:             Bobby Philip                                                   #
# Creation Date:      11/05/2001                                                     #
# Last Modified Date: 12/04/2001                                                     #
######################################################################################

#NEED TO PUT IN CODE TO SET IFS TO SAFE VALUES

# Bourne shell does not allow for the declaration of local
# variables in functions. Hence we create a non recursive method
# for processing all headers in a directory and its sub directories

######################################################################################

process_headers()
{

# make sure the source directory structure exists
  if  [ ! -d "$2" -o ! -r "$2" -o ! -x "$2" ]
  then
    echo "*****************************************"
    echo "Parameter 1 = $1"
    echo "Parameter 2 = $2"
    echo "Parameter 3 = $3"
    echo "*****************************************"
    echo "ERROR: Directory $2 is invalid"
    echo "*************  FAILING ***** FAILING *****************"
    exit 2
  fi

# get full path for the current working directory, the src and target dirs
  current_dir="`pwd`"
  src_parent_dir=`dirname "$2"`
  src_base_dir="`basename "$2"`"
  src_dir="`cd \"$src_parent_dir\" 2>/dev/null && pwd || echo \"$src_parent_dir\"`/$src_base_dir"

  target_parent_dir="`dirname "$3"`"
  target_base_dir="`basename "$3"`"
  target_dir="`cd \"$target_parent_dir\" 2>/dev/null && pwd || echo \"$target_parent_dir\"`/$target_base_dir"
# roseHome is the top rose source tree
  roseHome="$4"

# echo "*****************************************"
# echo "Parameter 1 = $1"
# echo "Parameter 2 = $2"
# echo "Parameter 3 = $3"
# echo "roseHome = $roseHome"
# echo "src_dir = $src_dir"
# echo "target_base_dir = $target_base_dir"
# echo "target_parent_dir = $target_parent_dir"
# echo "target_dir = $target_dir"
# echo "*****************************************"

# now check that the parent directory of target_dir exists and is writable
  if [ ! -d "$target_parent_dir" -o ! -w "$target_parent_dir" ]
  then
    echo "ERROR: Target directory cannot be created (Parent directory $target_parent_dir not writable)"
    exit 5
  fi
  changesNeededForThisDir=`find "$src_dir/." \( -name complex -o -name c++config.h \) -a -type f -a -print 2>/dev/null | wc -l`
  echo "$src_dir needs $changesNeededForThisDir change(s)"
  if test $changesNeededForThisDir -eq 0; then
    echo "$src_dir does not need any changes"
    target_dir=$src_dir
    target_base_dir=$src_base_dir
    target_parent_dir=$src_parent_dir
  else
    echo "$src_dir needs to be copied and modified"
    find "$src_dir/." -type d -a -print | sed -n "s|^${src_dir}\\(.*\\)\$|mkdir -p '$target_dir/\\1'|p" | sh -s
    if [[ "$OSTYPE" == "darwin"* ]]; then
    find "$src_dir/." -type f -a -print | sed -n "s|^${src_dir}\\(.*\\)\$|ln -s -F '&' '$target_dir/\\1'|p" | sh -s
    else
    find "$src_dir/." -type f -a -print | sed -n "s|^${src_dir}\\(.*\\)\$|ln -s --force '&' '$target_dir/\\1'|p" | sh -s
    fi
  # find "$src_dir/." -type f -a -print | sed -n "s|^${src_dir}\\(.*\\)\$|ln -s '&' '$target_dir/\\1'|p" | sh -s &
    echo "Done copying"
    # Find the special-case files to process
    find "$src_dir/." \( -name complex -o -name c++config.h \) -a -type f -a -print 2>/dev/null | \
    while read srcName; do
     # echo "processing files in directory $srcDirName to put into $targetDirName"
     # this is not the most efficient thing to do ...
       targetName="`echo "$srcName" | sed "s|$src_dir|$target_dir|g"`"
       rm "$targetName" # In case targetName is a link to something in the base include directory
       case "`basename $srcName`" in
# DQ (4/29/2016): I think this case is no longer required.  If it is then we should revisit it anyway.
# At the very least this fix for the problem is not the correc fix for C++11 code which has a macro 
# before the function name.
#        "complex" )
#          echo "Processing complex header file (commenting out private constructor) at $targetName"
#          sed -e 's@complex(_ComplexT __z)@// ***commented out for ROSE*** complex(_ComplexT __z)@g' "$srcName" > "$targetName" 2>/dev/null
#          ;;
         "c++config.h" )
           # JJW (10/29/2007): In GCC 4.2, the system header files use the visibility
           # attribute which EDG 3.3 does not support.  A #define can be changed to turn
           # that feature off, though.  Also, the built-in synchronization functions in
           # new versions of GCC are not yet supported in ROSE, so turn them off too.
           echo "Processing c++config header file (removing use of visibility attribute) at $targetName"
           cat "$srcName" | \
             sed 's/# *define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1/#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 0/' | \
             sed 's/# *define _GLIBCXX_ATOMIC_BUILTINS/#undef _GLIBCXX_ATOMIC_BUILTINS/' | \
             sed 's/# *define _GLIBCXX_USE_FLOAT128/#undef _GLIBCXX_USE_FLOAT128/' > "$targetName"
           ;;
         * ) echo "Should not get here -- modify find pattern" >&2; exit 1 ;;
       esac
    done
  fi

 # DQ (4/11/2005): Copy the header file that is to be read first (within EDG processing) into the compile tree.
 # echo "Copying $roseHome/config/rose_edg_required_macros_and_functions.h to $target_parent_dir"
 # cp $roseHome/config/rose_edg_required_macros_and_functions.h $target_parent_dir

# go back to where we started from
  cd "$current_dir"
}

######################################################################################
# start of main
# check for correct number of arguments and 
# whether a source directory has been specified
# if [ $# -eq 3 ]; then
if [ $# -eq 5 ]; then
  :
else
#  echo "ERROR: Usage is $0 <compiler> <target_dir> <source_dir>"
   echo "ERROR: Usage is $0 <compiler> <target_dir> <source_dir> <language> <compilerVendorName>"
   exit 1
fi

# echo "In main(): parameter 1 = $1  parameter 2 = $2 parameter 3 = $3 parameter 4 = $4 parameter 5 = $5"

# for now assume that if a compiler is specified that it is installed
# see if the full path name has been specified for compiler and if
# so check if the compiler executable exists in the specified directory
compilerName="`basename $1`"
compilerBinDir="`dirname $1`"
roseHome="$3"
language="$4"
compilerVendorName="$5"

# echo "In script file: create system headers: Using back-end compiler = \"$1\" compiler vendor name = $compilerVendorName for processing of unparsed source files from ROSE preprocessors."
echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
echo "compilerName       = $compilerName"
echo "compilerBinDir     = $compilerBinDir"
echo "roseHome           = $roseHome"
echo "language           = $language"
echo "compilerVendorName = $compilerVendorName"
echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

# DQ (2/2/2016): We don't compiler ROSE using ROSE as the backend (this was from when we had 
# to support ROSE compiling ROSE, but this should not require specialized support now).
# DQ (8/24/2009): Allow either "roseTranslator" or "roseAnalysis"
# if [ "$compilerName" == "roseTranslator" ]
# if [ "$compilerName" == "roseTranslator" || "$compilerName" == "roseAnalysis" ]
# if [ "$compilerName" = "roseTranslator" ]
# then
# compilerName="g++"
# echo "Changed compilerName from roseTranslator to $compilerName"
# echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
# echo "After change: compilerName   = $compilerName"
# echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
# elif [ "$compilerName" = "roseAnalysis" ]
# then
# compilerName="g++"
# echo "Changed compilerName from roseAnalysis to $compilerName"
# fi

# we try to ensure that paths can be given, to enable using different versions of the same compiler
if [ "$compilerBinDir" != "." ]
then
   [ -x "$1" ] || exit 1   # make sure that we have an executable
fi

# echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
# echo "targetDir originating string = $*"
# echo "targetDir =  $targetDir"
# echo "targetDirParent =  $targetDirParent"
# echo "targetDirBase =  $targetDirBase"
# echo "mainTargetDir =  $mainTargetDir"
# echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"


# determine the absolute path for the target dir
# targetDir=`echo $* | cut -f $# -d" "`
targetDir="$2"
targetDirParent="`dirname "$targetDir"`"
targetDirBase="`basename "$targetDir"`"
mainTargetDir="`cd \"$targetDirParent\" 2>/dev/null && pwd || echo \"$targetDirParent\"`/$targetDirBase"

echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
echo "Now these should be set ..."
echo "targetDir =  $targetDir"
echo "targetDirParent =  $targetDirParent"
echo "targetDirBase =  $targetDirBase"
echo "mainTargetDir =  $mainTargetDir"
echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

# is_C_compiler="no"

#AS moved the mkdir of $mainTargetDir here because the ICC and gcc case need it below
# we will first ensure that targetDirName exists
if mkdir -p "$mainTargetDir"; then
  : # echo "created target directory"
else
  echo "ERROR: cannot create target directory $mainTargetDir"
  exit 1
fi

if [ ! -w "$mainTargetDir" ]
then
   echo "ERROR: target directory $mainTargetDir is not writable"
   exit 1
fi

# Comment this out for debugging
# if true; then
# DQ (2/1/2016): Simplify the logic to avoid use of the backend compiler name.
if [ "x$language" = "xc" -o "x$language" = "xc++" ]; then

       echo "In create system headers: this is processing C or C++: language = $language"

     # DQ (1/14/2007): To work with Wave we supress the __STDC_HOSTED__ macro
       tmpFile="`mktemp -t roseconfigtempXXXXXXXXXX`"
       "$1" -E -dM -x $language /dev/null | grep -F -v -w -f "$roseHome/config/macro_names_to_remove" > "$tmpFile"
       sed "/REPLACE_ME_WITH_MACRO_DEFINITIONS/r$tmpFile" < "$roseHome/config/rose_edg_required_macros_and_functions.h.in" > "$mainTargetDir/rose_edg_required_macros_and_functions.h"

       echo "******************************************************"
       echo "******************************************************"
       cat "$tmpFile"
       echo "******************************************************"
       echo "******************************************************"
     # echo "Modified rose_edg_required_macros_and_functions.h file"
     # cat "$mainTargetDir/rose_edg_required_macros_and_functions.h"
     # echo "******************************************************"
     # echo "******************************************************"

       rm "$tmpFile"

     # echo "PREPROCESSOR_DEFS = $PREPROCESSOR_DEFS"
       echo "Generating  $mainTargetDir/rose_edg_required_macros_and_functions.h"
else
       echo "ERROR: Usage is create_system_headers compiler target_dir src_dir language"
       exit 1
fi
# fi

# echo "local script variable compilerHeadersDirCmd = $compilerHeadersDirCmd"
# echo "Building separate header directories"

# DQ (2/2/2016): Debugging new compiler vendor detection.
# echo "shell script to be run next: $roseHome/config/get_compiler_header_dirs"

echo "Calling get_compiler_header_dirs"
echo "status $?"

# DQ (2/2/2016): When the shell script returns an error we don't catch it.
iDir=0
# sh "$roseHome/config/get_compiler_header_dirs" "$1" | while read dirName
sh "$roseHome/config/get_compiler_header_dirs" "$1" "$language" "$compilerVendorName" | while read dirName
   do
        iDir=`expr "$iDir" + 1 `
        echo "processing header file compiler name = $1 directory = $dirName to be mapped to $mainTargetDir/hdrs${iDir} roseHome = $roseHome compilerVendorName = $compilerVendorName"

      # DQ (1/14/2007): Added "&" so that this would happen in parallel (to improve performance of configure on multi-core machines). 
      # JJW (7/18/2008): Commented it out because the process does not take too
      # long and these commands mess up configure output and cause trouble if
      # you try Ctrl-C when configure is running
        process_headers "$1" "$dirName" "$mainTargetDir/hdrs${iDir}" "$roseHome" # &
   done

if [ "${PIPESTATUS[0]}" -ne 0 ]; then
    echo "get_compiler_header_dirs failed"
    exit 1
fi

echo "DONE: Calling get_compiler_header_dirs: status $?"

# DQ (1/14/2007): It is not required to wait until the calls to process_headers complete
# wait

# DQ (1/14/2007): This is not handled directly for each backend compiler (above).
# DQ (4/11/2005): Copy the header file that is to be read first (within EDG processing) into the compile tree.
# echo "Copying ($roseHome/config/rose_edg_required_macros_and_functions.h) to ($target_parent_dir) ..."
# cp $roseHome/config/rose_edg_required_macros_and_functions.h $target_parent_dir



# DQ (1/14/2007): The variable target_parent_dir is not set in this shell procedure, so it causes an error.
system_headers_directory="$mainTargetDir/hdrs"
echo "system_headers_directory = $system_headers_directory should be used instead of target_parent_dir = $target_parent_dir"

echo "building the sys directory"
mkdir -p "$system_headers_directory/sys"
echo "DONE: building the sys directory"
echo "status $?"


###### Fixups for cdefs.h

# Replace "#include "/.../cdefs.h" with the path that's valid for this platform, copying the file from the ROSE source
# tree to the build tree in the process (because the source tree should not be modified when building).  The old behavior
# was for this script to call "exit 5" if a hard-coded system cdefs.h didn't exist. [Robb Matzke, 2015-11-04]
rose_src_cdefs_h="$roseHome/config/rose_specific_cdefs.h"
rose_bld_cdefs_h="$system_headers_directory/sys/cdefs.h"
rose_system_cdefs_h=$(sed -n 's/^# *include *["<]\(.*\/cdefs.h\)[>"].*/\1/p' <"$rose_src_cdefs_h")
if [ "$rose_system_cdefs_h" = "" ]; then
    echo "$0: error: could not find #include for cdefs.h in $rose_cdefs_h" >&2
    exit 5
elif [ ! -r "$rose_system_cdefs_h" ]; then
    # The "#include </.../cdefs.h> in the ROSE-specific cdefs.h is wrong, so try to fix it.
    real_system_cdefs_h=$(find /usr/include -follow -name cdefs.h |head -n1)
    if [ ! -r "$real_system_cdefs_h" ]; then
	(
	    echo "$0: error: cannot find a system cdefs.h header.  The ROSE-specific version of this header,"
	    echo "$rose_src_cdefs_h, mentions $rose_system_cdefs_h, which does not exist on this system. Furthermore,"
	    echo "this script was unable to find a suitable cdefs.h on this system.  You should edit the #include"
	    echo "in $rose_src_cdefs_h so has the correct full path to your system's cdefs.h header."
	) |fold -s -w100 |sed '2,$ s/^/    /' >&2
	exit 5
    fi

    # We found a valid system-install cdefs.h, so fix the ROSE-specific version to #include the system-installed version.
    escaped_system_cdefs_h=$(echo "$real_system_cdefs_h" |sed 's/\//\\\//g')
    sed 's/^\(# *include *["<]\)\/.*\/cdefs\.h\([>"].*\)/\1'"$escaped_system_cdefs_h"'\2/' \
	<"$rose_src_cdefs_h" >"$rose_bld_cdefs_h"
else
    # DQ (6/27/2006): Copy a ROSE specific version of cdefs.h to $target_parent_dir/sys so that the "__flexarr" macro
    # can be redefined so that Red Hat 7.3 will not require variable length arrays in definition of "struct __gconv_info
    # __cd;" in "/usr/include/_G_config.h".  This is a common problem since C does not support this (gnu does however as
    # an extension).  This is a problem for EDG and we fix it this way.
    cp "$rose_src_cdefs_h" "$rose_bld_cdefs_h" || exit 1
fi

###### End of fixups for cdefs.h




# if [ is_C_compiler = "yes" ]
if [ "x$language" = "xc" ]
then
    echo "We are handling C compiler specific details, so copy the ROSE specific fix for complex.h to $system_headers_directory" >&2
    cp "$roseHome/config/rose_specific_complex.h" "$system_headers_directory/complex.h"
fi

error_code=$?
if test $error_code != 0; then
     echo "Error in cp $roseHome/config/rose_specific_complex.h $system_headers_directory/complex.h: nonzero exit code returned to caller error_code = $error_code" >&2
     exit 1
fi

echo "status $?"
echo "Leaving script for processing header files: create_system_headers"
echo "status $?"
