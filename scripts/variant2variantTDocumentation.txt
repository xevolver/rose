
What is the purpose of the script?

Create an automated way of changing switch-case statements from the
old enum variant to the new enum variantT. 


How is the interface?

The scripts name is variant2variantT.py

python variant2variantT.py filename1 filename2 .... filenameN-1
                           filenameN

As input the scipt take multiple filenames which may contain instances
where the old enum variant is used. This will create backup everyone 
and each of the files to 'filename.bak' and replace the original file 
'filename' with the version using variantT.


----------------------------------------------------------------------------


Important sourcecode:


for file in sys.argv[1:]:
    print """Script for ROSE to replace old enum variant() with new 
             enum variantT()."""
    print """ Filename: """ + file
    print """ WARNING!! This will replace your old file. Old file 
             backuped in: """ + file + '.bak'
    os.system('cp ' + file + ' ' + file + '.bak')
    
    fileContent = open(file, 'r').read()
    
    # Finds all the cases of the enum variant() and replace them with the
    # equivalent enum of variantT()
    for ika in range(len(variantList)):
        pattern1 = re.compile('case\s*'+ variantList[ika] + '\s*:')
        fileContent = re.sub(pattern1, 'case ' + variantTList[ika] +
                             # ':', fileContent)

    output = open(file, 'w')
    output.write(fileContent)
    output.close()

    # Finds all switch statements treating the enum variant()
    lines = open(file, 'r').readlines()
    pattern2=re.compile('switch\s*' + '\('+ '\s*\w*\W*' + 'variant\s*'
    + 
                      '\('+ '\s*' + '\)\s*\)')

    for line in lines:
        match=pattern2.search(line)
        if match:
            f=re.sub('variant\s*\(\s*\)','variantT()',line)
            lindex=lines.index(line) 
            lines.remove(line)
            lines.insert(lindex,f) 
    write_file=open(file,'w') 

    # Stuffed all buffer lines back to the original file  
    for line in lines: 
        write_file.write(line)
    write_file.close()        



----------------------------------------------------------------------------


SOURCECODE BEFORE applying script:

string
TransformationSupport::buildOperatorString ( SgNode* astNode )
   {
  // This function defines the operator string used between 
  // the lhs and rhs for all binary operators. It supports
  // the assembly function below.

     string operatorString;
     ROSE_ASSERT (astNode != NULL);

  // printf ("In TransformationSupport::buildOperatorString(): astNode->sage_class_name() = %s \n",astNode->sage_class_name());

     switch (astNode->variant())
        {
          case ADD_OP:           operatorString = "+";  break;
          case SUBT_OP:          operatorString = "-";  break;
          case MULT_OP:          operatorString = "*";  break;
          case DIV_OP:           operatorString = "/";  break;
          case INTEGER_DIV_OP:   operatorString = "/";  break;
          case MOD_OP:           operatorString = "%";  break;
          case AND_OP:           operatorString = "&&"; break;
          case OR_OP:            operatorString = "||"; break;
          case BITXOR_OP:        operatorString = "^";  break;
          case BITAND_OP:        operatorString = "&";  break;
          case BITOR_OP:         operatorString = "|";  break;
          case EQ_OP:            operatorString = "=="; break;
          case LT_OP:            operatorString = "<";  break;
          case GT_OP:            operatorString = ">";  break;
          case NE_OP:            operatorString = "!="; break;
          case LE_OP:            operatorString = "<="; break;
          case GE_OP:            operatorString = ">="; break;
          case ASSIGN_OP:        operatorString = "=";  break;
          case PLUS_ASSIGN_OP:   operatorString = "+="; break;
          case MINUS_ASSIGN_OP:  operatorString = "-="; break;
          case AND_ASSIGN_OP:    operatorString = "&="; break;
          case IOR_ASSIGN_OP:    operatorString = "|="; break;
          case MULT_ASSIGN_OP:   operatorString = "*="; break;
          case DIV_ASSIGN_OP:    operatorString = "/="; break;
          case MOD_ASSIGN_OP:    operatorString = "%="; break;
          case XOR_ASSIGN_OP:    operatorString = "^="; break;
          case LSHIFT_ASSIGN_OP: operatorString = "<<="; break;
          case RSHIFT_ASSIGN_OP: operatorString = ">>="; break;

       // ??? Since a SgMemberFunctionRefExp is derived from a SgFunctionCallExp we need only handle one case
       // case MEMBER_FUNCTION_REF:
          case FUNC_CALL:   // SgFunctionCallExp
             {
               SgFunctionCallExp* functionCallExp = isSgFunctionCallExp(astNode);
               ROSE_ASSERT (functionCallExp != NULL);

               SgExpression* functionExpression = functionCallExp->get_function();
               ROSE_ASSERT (functionExpression != NULL);

               operatorString = buildOperatorString (functionExpression);
               break;
             }
#if 1
          case MEMBER_FUNCTION_REF:
             {
               SgMemberFunctionRefExp* memberFunctionRefExp = isSgMemberFunctionRefExp(astNode);
               ROSE_ASSERT (memberFunctionRefExp != NULL);

               SgMemberFunctionSymbol* memberFunctionSymbol = memberFunctionRefExp->get_symbol();
               ROSE_ASSERT (memberFunctionSymbol != NULL);

               operatorString = buildOperatorString (memberFunctionSymbol);
               break;
             }
#endif

          case MEMBER_FUNC_NAME:
          case FUNCTION_NAME:
             {
               SgFunctionSymbol* functionSymbol = isSgFunctionSymbol(astNode);
               ROSE_ASSERT (functionSymbol != NULL);

               SgName name = functionSymbol->get_name();
            // printf ("name = %s \n",name.str());
            // string tempName = rose::stringDuplicate(name.str());
               string tempName = name.str();

            // int stringLength = strlen(tempName);
               int stringLength = tempName.length();
               ROSE_ASSERT (stringLength >= 2);

               bool isAnOperator = FALSE;
            // if ( (stringLength >= 8) && (!strncmp (tempName,"operator",8)) )
               if ( (stringLength >= 8) && (!strncmp (tempName.c_str(),"operator",8)) )
                    isAnOperator = TRUE;

               if ( isAnOperator == TRUE )
                  {
                    operatorString = stringifyOperator(tempName);
                  }
                 else
                  {
                    printf ("isAnOperator == FALSE in buildOperatorString() \n");
                    ROSE_ABORT();
                  }
               break;
             }

          case RECORD_REF:  // SgDotExp
             {
               SgDotExp* dotExp = isSgDotExp(astNode);
               ROSE_ASSERT (dotExp != NULL);
               SgExpression* rhs = dotExp->get_rhs_operand();
               ROSE_ASSERT (rhs != NULL);

               operatorString = buildOperatorString (rhs);
               break;
             }
          case FUNCTION_REF: // SgFunctionRefExp
             {
               SgFunctionRefExp* functionReferenceExp = isSgFunctionRefExp(astNode);
               ROSE_ASSERT (functionReferenceExp != NULL);
               SgFunctionSymbol* functionSymbol = functionReferenceExp->get_symbol();
               ROSE_ASSERT (functionSymbol != NULL);

               operatorString = buildOperatorString (functionSymbol);
               break;
             }

          default:
               printf ("default reached in buildOperatorString() \n");
               ROSE_ABORT();
        }

  // printf ("operatorString = %s \n",operatorString);
  // ROSE_ABORT();

     return operatorString;
   }


------------------------------------------------------------------------

RESULT after applying script:

string
TransformationSupport::buildOperatorString ( SgNode* astNode )
   {
  // This function defines the operator string used between 
  // the lhs and rhs for all binary operators. It supports
  // the assembly function below.

     string operatorString;
     ROSE_ASSERT (astNode != NULL);

  // printf ("In TransformationSupport::buildOperatorString(): astNode->sage_class_name() = %s \n",astNode->sage_class_name());

     switch (astNode->variantT())
        {
          case V_SgAddOp:           operatorString = "+";  break;
          case V_SgSubtractOp:          operatorString = "-";  break;
          case V_SgMultiplyOp:          operatorString = "*";  break;
          case V_SgDivideOp:           operatorString = "/";  break;
          case V_SgIntegerDivideOp:   operatorString = "/";  break;
          case V_SgModOp:           operatorString = "%";  break;
          case V_SgAndOp:           operatorString = "&&"; break;
          case V_SgOrOp:            operatorString = "||"; break;
          case V_SgBitXorOp:        operatorString = "^";  break;
          case V_SgBitAndOp:        operatorString = "&";  break;
          case V_SgBitOrOp:         operatorString = "|";  break;
          case V_SgEqualityOp:            operatorString = "=="; break;
          case V_SgLessThanOp:            operatorString = "<";  break;
          case V_SgGreaterThanOp:            operatorString = ">";  break;
          case V_SgNotEqualOp:            operatorString = "!="; break;
          case V_SgLessOrEqualOp:            operatorString = "<="; break;
          case V_SgGreaterOrEqualOp:            operatorString = ">="; break;
          case V_SgAssignOp:        operatorString = "=";  break;
          case V_SgPlusAssignOp:   operatorString = "+="; break;
          case V_SgMinusAssignOp:  operatorString = "-="; break;
          case V_SgAndAssignOp:    operatorString = "&="; break;
          case V_SgIorAssignOp:    operatorString = "|="; break;
          case V_SgMultAssignOp:   operatorString = "*="; break;
          case V_SgDivAssignOp:    operatorString = "/="; break;
          case V_SgModAssignOp:    operatorString = "%="; break;
          case V_SgXorAssignOp:    operatorString = "^="; break;
          case V_SgLshiftAssignOp: operatorString = "<<="; break;
          case V_SgRshiftAssignOp: operatorString = ">>="; break;

       // ??? Since a SgMemberFunctionRefExp is derived from a SgFunctionCallExp we need only handle one case
       // case V_SgMemberFunctionRefExp:
          case V_SgFunctionCallExp:   // SgFunctionCallExp
             {
               SgFunctionCallExp* functionCallExp = isSgFunctionCallExp(astNode);
               ROSE_ASSERT (functionCallExp != NULL);

               SgExpression* functionExpression = functionCallExp->get_function();
               ROSE_ASSERT (functionExpression != NULL);

               operatorString = buildOperatorString (functionExpression);
               break;
             }
#if 1
          case V_SgMemberFunctionRefExp:
             {
               SgMemberFunctionRefExp* memberFunctionRefExp = isSgMemberFunctionRefExp(astNode);
               ROSE_ASSERT (memberFunctionRefExp != NULL);

               SgMemberFunctionSymbol* memberFunctionSymbol = memberFunctionRefExp->get_symbol();
               ROSE_ASSERT (memberFunctionSymbol != NULL);

               operatorString = buildOperatorString (memberFunctionSymbol);
               break;
             }
#endif

          case V_SgMemberFunctionSymbol:
          case V_SgFunctionSymbol:
             {
               SgFunctionSymbol* functionSymbol = isSgFunctionSymbol(astNode);
               ROSE_ASSERT (functionSymbol != NULL);

               SgName name = functionSymbol->get_name();
            // printf ("name = %s \n",name.str());
            // string tempName = rose::stringDuplicate(name.str());
               string tempName = name.str();

            // int stringLength = strlen(tempName);
               int stringLength = tempName.length();
               ROSE_ASSERT (stringLength >= 2);

               bool isAnOperator = FALSE;
            // if ( (stringLength >= 8) && (!strncmp (tempName,"operator",8)) )
               if ( (stringLength >= 8) && (!strncmp (tempName.c_str(),"operator",8)) )
                    isAnOperator = TRUE;

               if ( isAnOperator == TRUE )
                  {
                    operatorString = stringifyOperator(tempName);
                  }
                 else
                  {
                    printf ("isAnOperator == FALSE in buildOperatorString() \n");
                    ROSE_ABORT();
                  }
               break;
             }

          case V_SgDotExp:  // SgDotExp
             {
               SgDotExp* dotExp = isSgDotExp(astNode);
               ROSE_ASSERT (dotExp != NULL);
               SgExpression* rhs = dotExp->get_rhs_operand();
               ROSE_ASSERT (rhs != NULL);

               operatorString = buildOperatorString (rhs);
               break;
             }
          case V_SgFunctionRefExp: // SgFunctionRefExp
             {
               SgFunctionRefExp* functionReferenceExp = isSgFunctionRefExp(astNode);
               ROSE_ASSERT (functionReferenceExp != NULL);
               SgFunctionSymbol* functionSymbol = functionReferenceExp->get_symbol();
               ROSE_ASSERT (functionSymbol != NULL);

               operatorString = buildOperatorString (functionSymbol);
               break;
             }

          default:
               printf ("default reached in buildOperatorString() \n");
               ROSE_ABORT();
        }

  // printf ("operatorString = %s \n",operatorString);
  // ROSE_ABORT();

     return operatorString;
   }

